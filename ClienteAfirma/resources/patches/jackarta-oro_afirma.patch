diff -Nru old\org\apache\oro\io\AwkFilenameFilter.java new\org\apache\oro\io\AwkFilenameFilter.java
--- old\org\apache\oro\io\AwkFilenameFilter.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\io\AwkFilenameFilter.java	Thu Jan 01 01:00:00 1970
@@ -1,109 +0,0 @@
-/*
- * $Id: AwkFilenameFilter.java,v 1.7 2003/11/07 20:16:23 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.io;
-
-import java.io.*;
-
-import org.apache.oro.text.regex.*;
-import org.apache.oro.text.awk.*;
-import org.apache.oro.text.*;
-
-/**
- * AwkFilenameFilter is a RegexFilenameFilter subclass that filters on Awk
- * regular expressions as implemented by the org.apache.oro.text.awk package,
- * which is required to use this class.
- *
- * @version @version@
- * @since 1.0
- * @see RegexFilenameFilter
- * @see Perl5FilenameFilter
- * @see GlobFilenameFilter
- */
-public class AwkFilenameFilter extends RegexFilenameFilter {
-  private static final PatternMatcher __MATCHER = new AwkMatcher();
-  private static final PatternCache __CACHE = 
-                            new PatternCacheLRU(new AwkCompiler());
-
-  /**
-   * Construct a filter initialized with the indicated regular expression
-   * and accompanying compilation options conforming to those used by
-   * <code> org.apache.oro.text.awk.AwkCompiler </code>
-   * <p>
-   * @param regex  The regular expression on which to filter.
-   * @param options A set of compilation options.
-   * @exception MalformedCachePatternException  If there is an error in
-   *     compiling the regular expression.  This need not be caught if
-   *     you are using a hard-coded expression that you know is correct.
-   *     But for robustness and reliability you should catch this exception
-   *     for dynamically entered expressions determined at runtime.
-   */
-  public AwkFilenameFilter(String regex, int options) {
-    super(__CACHE, __MATCHER, regex, options);
-  }
-
-  /** Same as AwkFilenameFilter(regex, AwkCompiler.DEFAULT_MASK); */
-  public AwkFilenameFilter(String regex) {
-    super(__CACHE, __MATCHER, regex);
-  }
-
-  /** Same as AwkFilenameFilter(""); */
-  public AwkFilenameFilter() {
-    super(__CACHE, __MATCHER);
-  }
-}
diff -Nru old\org\apache\oro\io\GlobFilenameFilter.java new\org\apache\oro\io\GlobFilenameFilter.java
--- old\org\apache\oro\io\GlobFilenameFilter.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\io\GlobFilenameFilter.java	Thu Jan 01 01:00:00 1970
@@ -1,108 +0,0 @@
-/*
- * $Id: GlobFilenameFilter.java,v 1.7 2003/11/07 20:16:23 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.io;
-
-import java.io.*;
-
-import org.apache.oro.text.regex.*;
-import org.apache.oro.text.*;
-
-/**
- * GlobFilenameFilter is a RegexFilenameFilter subclass that filters on Glob
- * regular expressions as implemented by the org.apache.oro.text package,
- * which is required to use this class.
- *
- * @version @version@
- * @since 1.0
- * @see RegexFilenameFilter
- * @see AwkFilenameFilter
- * @see GlobFilenameFilter
- */
-public class GlobFilenameFilter extends RegexFilenameFilter {
-  private static final PatternMatcher __MATCHER = new Perl5Matcher();
-  private static final PatternCache __CACHE = 
-                             new PatternCacheLRU(new GlobCompiler());
-
-  /**
-   * Construct a filter initialized with the indicated regular expression
-   * and accompanying compilation options conforming to those used by
-   * <code> org.apache.oro.text.GlobCompiler </code>
-   * <p>
-   * @param regex  The regular expression on which to filter.
-   * @param options A set of compilation options.
-   * @exception MalformedCachePatternException  If there is an error in
-   *     compiling the regular expression.  This need not be caught if
-   *     you are using a hard-coded expression that you know is correct.
-   *     But for robustness and reliability you should catch this exception
-   *     for dynamically entered expressions determined at runtime.
-   */
-  public GlobFilenameFilter(String regex, int options) {
-    super(__CACHE, __MATCHER, regex, options);
-  }
-
-  /** Same as GlobFilenameFilter(regex, GlobCompiler.DEFAULT_MASK); */
-  public GlobFilenameFilter(String regex) {
-    super(__CACHE, __MATCHER, regex);
-  }
-
-  /** Same as GlobFilenameFilter(""); */
-  public GlobFilenameFilter() {
-    super(__CACHE, __MATCHER);
-  }
-}
diff -Nru old\org\apache\oro\io\package.html new\org\apache\oro\io\package.html
--- old\org\apache\oro\io\package.html	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\io\package.html	Thu Jan 01 01:00:00 1970
@@ -1,6 +0,0 @@
-<!-- $Id: package.html,v 1.1.1.1 2000/07/23 23:08:48 jon Exp $ -->
-<body>
-This package provides FilenameFilters that filter based on a regular
-expression and other I/O-related classes that derive their
-functionality from regular expressions.
-</body>
diff -Nru old\org\apache\oro\io\Perl5FilenameFilter.java new\org\apache\oro\io\Perl5FilenameFilter.java
--- old\org\apache\oro\io\Perl5FilenameFilter.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\io\Perl5FilenameFilter.java	Thu Jan 01 01:00:00 1970
@@ -1,108 +0,0 @@
-/*
- * $Id: Perl5FilenameFilter.java,v 1.7 2003/11/07 20:16:23 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.io;
-
-import java.io.*;
-
-import org.apache.oro.text.regex.*;
-import org.apache.oro.text.*;
-
-
-/**
- * Perl5FilenameFilter is a RegexFilenameFilter subclass that filters on Perl5
- * regular expressions as implemented by the org.apache.oro.text.regex package,
- * which is required to use this class.
- *
- * @version @version@
- * @since 1.0
- * @see RegexFilenameFilter
- * @see AwkFilenameFilter
- * @see GlobFilenameFilter
- */
-public class Perl5FilenameFilter extends RegexFilenameFilter {
-  private static final PatternMatcher __MATCHER = new Perl5Matcher();
-  private static final PatternCache __CACHE     = new PatternCacheLRU();
-
-  /**
-   * Construct a filter initialized with the indicated regular expression
-   * and accompanying compilation options conforming to those used by
-   * <code> org.apache.oro.text.regex.Perl5Compiler </code>
-   * <p>
-   * @param regex  The regular expression on which to filter.
-   * @param options A set of compilation options.
-   * @exception MalformedCachePatternException  If there is an error in
-   *     compiling the regular expression.  This need not be caught if
-   *     you are using a hard-coded expression that you know is correct.
-   *     But for robustness and reliability you should catch this exception
-   *     for dynamically entered expressions determined at runtime.
-   */
-  public Perl5FilenameFilter(String regex, int options) {
-    super(__CACHE, __MATCHER, regex, options);
-  }
-
-  /** Same as Perl5FilenameFilter(regex, Perl5Compiler.DEFAULT_MASK); */
-  public Perl5FilenameFilter(String regex) {
-    super(__CACHE, __MATCHER, regex);
-  }
-
-  /** Same as Perl5FilenameFilter(""); */
-  public Perl5FilenameFilter() {
-    super(__CACHE, __MATCHER);
-  }
-}
diff -Nru old\org\apache\oro\io\RegexFilenameFilter.java new\org\apache\oro\io\RegexFilenameFilter.java
--- old\org\apache\oro\io\RegexFilenameFilter.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\io\RegexFilenameFilter.java	Thu Jan 01 01:00:00 1970
@@ -1,165 +0,0 @@
-/*
- * $Id: RegexFilenameFilter.java,v 1.9 2003/11/07 20:16:23 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.io;
-
-import java.io.*;
-
-import org.apache.oro.text.regex.*;
-import org.apache.oro.text.*;
-
-/**
- * RegexFilenameFilter is the base class for a set of FilenameFilter
- * implementations that filter based on a regular expression.
- *
- * @version @version@
- * @since 1.0
- * @see Perl5FilenameFilter
- * @see AwkFilenameFilter
- * @see GlobFilenameFilter
- */
-public abstract class RegexFilenameFilter implements FilenameFilter,
-						     FileFilter
- {
-  PatternCache   _cache;
-  PatternMatcher _matcher;
-  Pattern _pattern;
-
-  RegexFilenameFilter(PatternCache cache, PatternMatcher matcher, String regex)
-  {
-    _cache   = cache;
-    _matcher = matcher;
-    setFilterExpression(regex);
-  }
-
-  RegexFilenameFilter(PatternCache cache, PatternMatcher matcher,
-		      String regex, int options)
-  {
-    _cache   = cache;
-    _matcher = matcher;
-    setFilterExpression(regex, options);
-  }
-
-  RegexFilenameFilter(PatternCache cache, PatternMatcher matcher) {
-    this(cache, matcher, "");
-  }
-
-  /**
-   * Set the regular expression on which to filter.
-   * <p>
-   * @param regex  The regular expression on which to filter.
-   * @exception MalformedCachePatternException  If there is an error in
-   *     compiling the regular expression.  This need not be caught if
-   *     you are using a hard-coded expression that you know is correct.
-   *     But for robustness and reliability you should catch this exception
-   *     for dynamically entered expressions determined at runtime.
-   */
-  public void setFilterExpression(String regex)
-       throws MalformedCachePatternException
-  {
-    _pattern = _cache.getPattern(regex);
-  }
-
-  /**
-   * Set the regular expression on which to filter along with any
-   * special options to use when compiling the expression.
-   * <p>
-   * @param regex  The regular expression on which to filter.
-   * @param options A set of compilation options specific to the regular
-   *        expression grammar being used.
-   * @exception MalformedCachePatternException  If there is an error in
-   *     compiling the regular expression.  This need not be caught if
-   *     you are using a hard-coded expression that you know is correct.
-   *     But for robustness and reliability you should catch this exception
-   *     for dynamically entered expressions determined at runtime.
-   */
-  public void setFilterExpression(String regex, int options)
-       throws MalformedCachePatternException
-  {
-    _pattern = _cache.getPattern(regex, options);
-  }
-
-  /**
-   * Filters a filename.  Tests if the filename EXACTLY matches the pattern
-   * contained by the filter.  The directory argument is not examined.
-   * Conforms to the java.io.FilenameFilter interface.
-   * <p>
-   * @param dir  The directory containing the file.
-   * @param filename  The name of the file.
-   * @return True if the filename EXACTLY matches the pattern, false if not.
-   */
-  public boolean accept(File dir, String filename) {
-    synchronized(_matcher) {
-      return _matcher.matches(filename, _pattern);
-    }
-  }
-
-  /**
-   * Filters a filename.  Tests if the filename EXACTLY matches the pattern
-   * contained by the filter.  The filename is defined as pathname.getName().
-   * Conforms to the java.io.FileFilter interface.
-   * <p>
-   * @param pathname  The file pathname.
-   * @return True if the filename EXACTLY matches the pattern, false if not.
-   */
-  public boolean accept(File pathname) {
-    synchronized(_matcher) {
-      return _matcher.matches(pathname.getName(), _pattern);
-    }
-  }
-}
diff -Nru old\org\apache\oro\overview.html new\org\apache\oro\overview.html
--- old\org\apache\oro\overview.html	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\overview.html	Thu Jan 01 01:00:00 1970
@@ -1,10 +0,0 @@
-<!-- $Id: overview.html,v 1.1.1.1 2000/07/23 23:08:48 jon Exp $ -->
-<body>
-The Jakarta-ORO library contains packages for performing general text
-processing in Java, with an aim to support, though not specifically
-limited to, servlet development.  The core package is
-{@link org.apache.oro.text.regex}, which defines abstract interfaces for
-manipulating regular expressions, as well as a set of Perl5 comptabile
-regular expression classes.  Developers will mostly be interested only
-in that package.
-</body>
diff -Nru old\org\apache\oro\text\awk\AwkCompiler.java new\org\apache\oro\text\awk\AwkCompiler.java
--- old\org\apache\oro\text\awk\AwkCompiler.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\AwkCompiler.java	Thu Jan 01 01:00:00 1970
@@ -1,904 +0,0 @@
-/*
- * $Id: AwkCompiler.java,v 1.10 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import org.apache.oro.text.regex.*;
-
-/**
- * The AwkCompiler class is used to create compiled regular expressions
- * conforming to the Awk regular expression syntax.  It generates
- * AwkPattern instances upon compilation to be used in conjunction
- * with an AwkMatcher instance.  AwkMatcher finds true leftmost-longest
- * matches, so you must take care with how you formulate your regular
- * expression to avoid matching more than you really want.
- * <p>
- * The supported regular expression syntax is a superset of traditional AWK,
- * but NOT to be confused with GNU AWK or other AWK variants.  Additionally,
- * this AWK implementation is DFA-based and only supports 8-bit ASCII.
- * Consequently, these classes can perform very fast pattern matches in
- * most cases.
- * <p>
- * This is the traditional Awk syntax that is supported:
- * <ul>
- * <li> Alternatives separated by |
- * <li> Quantified atoms
- * <dl compact>
- *      <dt> *     <dd> Match 0 or more times.
- *      <dt> +     <dd> Match 1 or more times.
- *      <dt> ?     <dd> Match 0 or 1 times.
- * </dl>
- * <li> Atoms
- * <ul>
- *     <li> regular expression within parentheses
- *     <li> a . matches everything including newline
- *     <li> a ^ is a null token matching the beginning of a string
- *          but has no relation to newlines (and is only valid at the
- *          beginning of a regex; this differs from traditional awk
- *          for the sake of efficiency in Java).
- *     <li> a $ is a null token matching the end of a string but has
- *          no relation to newlines (and is only valid at the
- *          end of a regex; this differs from traditional awk for the
- *          sake of efficiency in Java).
- *     <li> Character classes (e.g., [abcd]) and ranges (e.g. [a-z])
- *     <ul>
- *         <li> Special backslashed characters work within a character class
- *     </ul>
- *     <li> Special backslashed characters
- *     <dl compact>
- *         <dt> \b <dd> backspace
- *         <dt> \n <dd> newline
- *         <dt> \r <dd> carriage return
- *         <dt> \t <dd> tab
- *         <dt> \f <dd> formfeed
- *         <dt> \xnn <dd> hexadecimal representation of character
- *         <dt> \nn or \nnn <dd> octal representation of character
- *         <dt> Any other backslashed character matches itself
- *     </dl>
- * </ul></ul>
- * <p>
- * This is the extended syntax that is supported:
- * <ul>
- * <li> Quantified atoms
- * <dl compact>
- *      <dt> {n,m} <dd> Match at least n but not more than m times.
- *	<dt> {n,}  <dd> Match at least n times.
- *      <dt> {n}   <dd> Match exactly n times.  
- * </dl>
- * <li> Atoms
- * <ul>
- *     <li> Special backslashed characters
- *     <dl compact>
- *         <dt> \d <dd> digit [0-9]
- *         <dt> \D <dd> non-digit [^0-9]
- *         <dt> \w <dd> word character [0-9a-z_A-Z]
- *         <dt> \W <dd> a non-word character [^0-9a-z_A-Z]
- *         <dt> \s <dd> a whitespace character [ \t\n\r\f]
- *         <dt> \S <dd> a non-whitespace character [^ \t\n\r\f]
- *         <dt> \cD <dd> matches the corresponding control character
- *         <dt> \0 <dd> matches null character
- *     </dl>
- * </ul></ul>
- *
- * @version @version@
- * @since 1.0
- * @see org.apache.oro.text.regex.PatternCompiler
- * @see org.apache.oro.text.regex.MalformedPatternException
- * @see AwkPattern
- * @see AwkMatcher
- */                        
-public final class AwkCompiler implements PatternCompiler {
-
-  /**
-   * The default mask for the {@link #compile compile} methods.
-   * It is equal to 0 and indicates no special options are active.
-   */
-  public static final int DEFAULT_MASK          = 0;
-
-  /**
-   * A mask passed as an option to the {@link #compile compile} methods
-   * to indicate a compiled regular expression should be case insensitive.
-   */
-  public static final int CASE_INSENSITIVE_MASK = 0x0001;
-
-
-  /**
-   * A mask passed as an option to the  {@link #compile compile} methods
-   * to indicate a compiled regular expression should treat input as having
-   * multiple lines.  This option affects the interpretation of
-   * the <b> . </b> metacharacters.  When this mask is used,
-   * the <b> . </b> metacharacter will not match newlines.  The default
-   * behavior is for <b> . </b> to match newlines.
-   */
-  public static final int MULTILINE_MASK = 0x0002;
-
-  static final char _END_OF_INPUT = '\uFFFF';
-  
-  // All of these are initialized by the compile() and _parse() methods
-  // so there is no need or use in initializing them in the constructor
-  // although this may change in the future.
-  private boolean __inCharacterClass, __caseSensitive, __multiline;
-  private boolean __beginAnchor, __endAnchor;
-  private char __lookahead;
-  private int __position, __bytesRead, __expressionLength;
-  private char[] __regularExpression;
-  private int __openParen, __closeParen;
-
-  // We do not currently need to initialize any state, but keep this
-  // commented out as a reminder that we may have to at some point.
-  //public AwkCompiler() { }
-
-  private static boolean __isMetachar(char token) {
-    return (token == '*' || token == '?' || token == '+' ||
-	    token == '[' || token == ']' || token == '(' ||
-	    token == ')' || token == '|' || /* token == '^' ||
-	    token == '$' || */ token == '.');
-  }
-
-  static boolean _isWordCharacter(char token) {
-    return ((token >= 'a' && token <= 'z') || 
-	    (token >= 'A' && token <= 'Z') || 
-	    (token >= '0' && token <= '9') || 
-	    (token == '_'));
-  }
-
-  static boolean _isLowerCase(char token){
-    return (token >= 'a' && token <= 'z');
-  }
-
-  static boolean _isUpperCase(char token){
-    return (token >= 'A' && token <= 'Z');
-  }
-
-  static char _toggleCase(char token){
-    if(_isUpperCase(token))
-      return (char)(token + 32);
-    else if(_isLowerCase(token))
-      return (char)(token - 32);
-
-    return token;
-  }
-
-
-  private void __match(char token) throws MalformedPatternException {
-    if(token == __lookahead){
-      if(__bytesRead < __expressionLength)
-	__lookahead = __regularExpression[__bytesRead++];
-      else
-	__lookahead = _END_OF_INPUT;
-    }
-    else
-      throw new MalformedPatternException("token: " + token + 
-				    " does not match lookahead: " +
-				    __lookahead + " at position: " +
-					     __bytesRead);
-  }
-
-  private void __putback() {
-    if(__lookahead != _END_OF_INPUT)
-      --__bytesRead;
-    __lookahead = __regularExpression[__bytesRead - 1];
-  }
-
-  private SyntaxNode __regex() throws MalformedPatternException {
-    SyntaxNode left;
-
-    left = __branch();
-
-    if(__lookahead == '|') {
-      __match('|');
-      return (new OrNode(left, __regex()));
-    } 
-
-    return left;
-  }
-
-
-  private SyntaxNode __branch() throws MalformedPatternException {
-    CatNode current;
-    SyntaxNode left, root;
-
-    left = __piece();
-
-    if(__lookahead == ')'){
-      if(__openParen > __closeParen)
-	return left;
-      else
-	  throw
-	    new MalformedPatternException("Parse error: close parenthesis"
-	     + " without matching open parenthesis at position " + __bytesRead);
-    } else if(__lookahead == '|' || __lookahead == _END_OF_INPUT)
-      return left;
-
-    root = current = new CatNode();
-    current._left = left;
-
-    while(true) {
-      left = __piece();
-
-      if(__lookahead == ')'){
-	if(__openParen > __closeParen){
-	  current._right = left;
-	  break;
-	}
-	else
-	  throw
-	    new MalformedPatternException("Parse error: close parenthesis"
-	     + " without matching open parenthesis at position " + __bytesRead);
-      } else  if(__lookahead == '|' || __lookahead == _END_OF_INPUT){
-	current._right = left;
-	break;
-      }
-
-      current._right = new CatNode();
-      current = (CatNode)current._right;
-      current._left   = left;
-    }
-
-    return root;
-  }
-
-
-  private SyntaxNode __piece() throws MalformedPatternException {
-    SyntaxNode left;
-
-    left = __atom();
-
-    switch(__lookahead){
-    case '+' : __match('+'); return (new PlusNode(left));
-    case '?' : __match('?'); return (new QuestionNode(left));
-    case '*' : __match('*'); return (new StarNode(left));
-    case '{' : return __repetition(left);
-    }
-
-    return left;
-  }
-
-  // if numChars is 0, this means match as many as you want
-  private int __parseUnsignedInteger(int radix, int minDigits, int maxDigits)
-    throws MalformedPatternException {
-    int num, digits = 0;
-    StringBuffer buf;
-
-    // We don't expect huge numbers, so an initial buffer of 4 is fine.
-    buf = new StringBuffer(4);
-
-    while(Character.digit(__lookahead, radix) != -1 && digits < maxDigits){
-      buf.append((char)__lookahead);
-      __match(__lookahead);
-      ++digits;
-    }
-
-    if(digits < minDigits || digits > maxDigits)
-      throw
-	new MalformedPatternException(
-        "Parse error: unexpected number of digits at position " + __bytesRead);
-
-    try {
-      num = Integer.parseInt(buf.toString(), radix);
-    } catch(NumberFormatException e) {
-      throw
-	new MalformedPatternException("Parse error: numeric value at " +
-				"position " + __bytesRead + " is invalid");
-    }
-
-    return num;
-  }
-
-  private SyntaxNode __repetition(SyntaxNode atom)
-    throws MalformedPatternException {
-    int min, max, startPosition[];
-    SyntaxNode root = null;
-    CatNode catNode;
-
-    __match('{');
-
-    min = __parseUnsignedInteger(10, 1, Integer.MAX_VALUE);
-    startPosition = new int[1];
-    startPosition[0] = __position;
-
-    if(__lookahead == '}'){
-      // Match exactly min times.  Concatenate the atom min times.
-      __match('}');
-
-      if(min == 0)
-	throw
-	  new MalformedPatternException(
-              "Parse error: Superfluous interval specified at position " +
-              __bytesRead + ".  Number of occurences was set to zero.");
-
-      if(min == 1)
-	return atom;
-
-      root = catNode = new CatNode();
-      catNode._left = atom;
-
-      while(--min > 1) {
-	atom = atom._clone(startPosition);
-
-	catNode._right = new CatNode();
-	catNode       = (CatNode)catNode._right;
-	catNode._left  = atom;
-      }
-
-      catNode._right = atom._clone(startPosition);
-    } else if(__lookahead == ','){
-      __match(',');
-
-      if(__lookahead == '}') {
-	// match at least min times
-	__match('}');
-
-	if(min == 0)
-	  return new StarNode(atom);
-
-	if(min == 1)
-	  return new PlusNode(atom);
-
-	root = catNode = new CatNode();
-	catNode._left = atom;
-
-	while(--min > 0) {
-	  atom = atom._clone(startPosition);
-
-	  catNode._right = new CatNode();
-	  catNode       = (CatNode)catNode._right;
-	  catNode._left  = atom;
-	}
-
-	catNode._right = new StarNode(atom._clone(startPosition));
-      } else {
-	// match at least min times and at most max times
-	max = __parseUnsignedInteger(10, 1, Integer.MAX_VALUE);
-	__match('}');
-
-	if(max < min)
-	  throw
-	    new MalformedPatternException("Parse error: invalid interval; "
-	     +  max + " is less than " + min + " at position " + __bytesRead);
-	if(max == 0)
-	  throw
-	    new MalformedPatternException(
-	    "Parse error: Superfluous interval specified at position " +
-	    __bytesRead + ".  Number of occurences was set to zero.");
-
-	if(min == 0) {
-	  if(max == 1)
-	    return new QuestionNode(atom);
-
-	  root = catNode = new CatNode();
-	  atom = new QuestionNode(atom);
-	  catNode._left = atom;
-
-	  while(--max > 1) {
-	    atom =  atom._clone(startPosition);
-
-	    catNode._right = new CatNode();
-	    catNode       = (CatNode)catNode._right;
-	    catNode._left  = atom;
-	  }
-
-	  catNode._right = atom._clone(startPosition);
-	} else if(min == max) {
-	  if(min == 1)
-	    return atom;
-
-	  root = catNode = new CatNode();
-	  catNode._left = atom;
-
-	  while(--min > 1) {
-	    atom = atom._clone(startPosition);
-
-	    catNode._right = new CatNode();
-	    catNode       = (CatNode)catNode._right;
-	    catNode._left  = atom;
-	  }
-
-	  catNode._right = atom._clone(startPosition);
-	} else {
-	  int count;
-
-	  root = catNode = new CatNode();
-	  catNode._left = atom;
-
-	  for(count=1; count < min; count++) {
-	    atom = atom._clone(startPosition);
-
-	    catNode._right = new CatNode();
-	    catNode       = (CatNode)catNode._right;
-	    catNode._left  = atom;
-	  }
-
-	  atom = new QuestionNode(atom._clone(startPosition));
-
-	  count = max-min;
-
-	  if(count == 1)
-	    catNode._right = atom;
-	  else {
-	    catNode._right = new CatNode();
-	    catNode = (CatNode)catNode._right;
-	    catNode._left = atom;
-
-	    while(--count > 1) {
-	      atom = atom._clone(startPosition);
-
-	      catNode._right = new CatNode();
-	      catNode       = (CatNode)catNode._right;
-	      catNode._left  = atom;
-	    }
-
-	    catNode._right = atom._clone(startPosition);
-	  }
-	}
-      }
-    } else
-      throw
-	new MalformedPatternException("Parse error: unexpected character " +
-		__lookahead + " in interval at position "	+ __bytesRead);
-    __position = startPosition[0];
-    return root;
-  }
-
-
-  private SyntaxNode __backslashToken() throws MalformedPatternException {
-    SyntaxNode current;
-    char token;
-    int number;
-
-    __match('\\');
-
-    if(__lookahead == 'x'){
-      __match('x');
-      // Parse a hexadecimal number
-      current = _newTokenNode((char)__parseUnsignedInteger(16, 2, 2),
-			     __position++);
-    } else if(__lookahead == 'c') {
-      __match('c');
-      // Create a control character
-      token = Character.toUpperCase(__lookahead);
-      token = (char)(token > 63 ? token - 64 : token + 64);
-      current = new TokenNode(token, __position++);
-      __match(__lookahead);
-    } else if(__lookahead >= '0' && __lookahead <= '9') {
-      __match(__lookahead);
-
-      if(__lookahead >= '0' && __lookahead <= '9'){
-	// We have an octal character or a multi-digit backreference.
-	// Assume octal character for now.
-	__putback();
-	number = __parseUnsignedInteger(10, 2, 3);
-	number = Integer.parseInt(Integer.toString(number), 8);
-	current =  _newTokenNode((char)number, __position++);
-      } else {
-	// We have either \0, an escaped digit, or a backreference.
-	__putback();
-	if(__lookahead == '0'){
-	  // \0 matches the null character
-	  __match('0');
-	  current = new TokenNode('\0', __position++);
-	} else {
-	  // Either an escaped digit or backreference.
-	  number = Character.digit(__lookahead, 10);
-	  current =  _newTokenNode(__lookahead, __position++);
-	  __match(__lookahead);
-	}
-      }
-    } else if(__lookahead == 'b') {
-      // Inside of a character class the \b means backspace, otherwise
-      // it means a word boundary
-      //if(__inCharacterClass)
-      // \b always means backspace
-      current = new TokenNode('\b', __position++);
-      /*
-      else 
-	current = new TokenNode((char)LeafNode._WORD_BOUNDARY_MARKER_TOKEN,
-				position++);
-				*/
-      __match('b');
-    } /*else if(__lookahead == 'B' && !__inCharacterClass){
-      current = new TokenNode((char)LeafNode._NONWORD_BOUNDARY_MARKER_TOKEN,
-			      position++);
-      __match('B');
-    } */ else {
-      CharacterClassNode characterSet;
-      token = __lookahead;
-
-      switch(__lookahead){
-      case 'n' : token = '\n'; break;
-      case 'r' : token = '\r'; break;
-      case 't' : token = '\t'; break;
-      case 'f' : token = '\f'; break;
-      }
-
-      switch(token) {
-      case 'd' :
-	characterSet = new CharacterClassNode(__position++);
-	characterSet._addTokenRange('0', '9');
-	current = characterSet;
-	break;
-      case 'D' :
-	characterSet = new NegativeCharacterClassNode(__position++);
-	characterSet._addTokenRange('0', '9');
-	current = characterSet;
-	break;
-      case 'w' :
-	characterSet = new CharacterClassNode(__position++);
-	characterSet._addTokenRange('0', '9');
-	characterSet._addTokenRange('a', 'z');
-	characterSet._addTokenRange('A', 'Z');
-	characterSet._addToken('_');
-	current = characterSet;
-	break;
-      case 'W' :
-	characterSet = new NegativeCharacterClassNode(__position++);
-	characterSet._addTokenRange('0', '9');
-	characterSet._addTokenRange('a', 'z');
-	characterSet._addTokenRange('A', 'Z');
-	characterSet._addToken('_');
-	current = characterSet;
-	break;
-      case 's' :
-	characterSet = new CharacterClassNode(__position++);
-	characterSet._addToken(' ');
-	characterSet._addToken('\f');
-	characterSet._addToken('\n');
-	characterSet._addToken('\r');
-	characterSet._addToken('\t');
-	current = characterSet;
-	break;
-      case 'S' :
-	characterSet = new NegativeCharacterClassNode(__position++);
-	characterSet._addToken(' ');
-	characterSet._addToken('\f');
-	characterSet._addToken('\n');
-	characterSet._addToken('\r');
-	characterSet._addToken('\t');
-	current = characterSet;
-	break;
-	default  : current = _newTokenNode(token, __position++); break;
-      }
-
-      __match(__lookahead);
-    }
-
-    return current;
-  }
-
-  private SyntaxNode __atom() throws MalformedPatternException {
-    SyntaxNode current;
-
-    if(__lookahead == '(') {
-      __match('(');
-      ++__openParen;
-      current = __regex();
-      __match(')');
-      ++__closeParen;
-    } else if(__lookahead == '[')
-      current = __characterClass();
-    else if(__lookahead == '.') {
-      CharacterClassNode characterSet;
-
-      __match('.');
-      characterSet = new NegativeCharacterClassNode(__position++);
-      if(__multiline)
-	characterSet._addToken('\n');
-      current = characterSet;
-    } else if(__lookahead == '\\') {
-      current = __backslashToken();
-    } /*else if(__lookahead == '^') {
-      current =
-	new TokenNode((char)LeafNode._BEGIN_LINE_MARKER_TOKEN, __position++);
-      __match('^');
-    } else if(__lookahead == '$') {
-      current =
-	new TokenNode((char)LeafNode._END_LINE_MARKER_TOKEN, __position++);
-      __match('$');
-    } */ else if(!__isMetachar(__lookahead)) {
-      current = _newTokenNode(__lookahead, __position++);
-      __match(__lookahead);
-    } else
-      throw
-	new MalformedPatternException("Parse error: unexpected character " +
-				__lookahead + " at position " + __bytesRead);
-
-    return current;
-  }
-
-
-  private SyntaxNode __characterClass() throws MalformedPatternException {
-    char lastToken, token;
-    SyntaxNode node;
-    CharacterClassNode current;
-
-    __match('[');
-    __inCharacterClass = true;
-
-    if(__lookahead == '^'){
-      __match('^');
-      current = new NegativeCharacterClassNode(__position++);
-    } else
-      current = new CharacterClassNode(__position++);
-
-    while(__lookahead != ']' && __lookahead != _END_OF_INPUT) {
-
-      if(__lookahead == '\\'){
-	node = __backslashToken();
-	--__position;
-
-	// __backslashToken() (actually newTokenNode()) does not take care of
-        // case insensitivity when __inCharacterClass is true.
-	if(node instanceof TokenNode){
-	  lastToken = ((TokenNode)node)._token;
-	  current._addToken(lastToken);
-	  if(!__caseSensitive)
-	    current._addToken(_toggleCase(lastToken));
-	} else {
-	  CharacterClassNode slash;
-	  slash = (CharacterClassNode)node;
-	  // This could be made more efficient by manipulating the
-	  // characterSet elements of the CharacterClassNodes but
-	  // for the moment, this is more clear.
-	  for(token=0; token < LeafNode._NUM_TOKENS; token++){
-	    if(slash._matches(token))
-	      current._addToken(token);
-	  }
-
-	  // A byproduct of this act is that when a '-' occurs after
-	  // a \d, \w, etc. it is not interpreted as a range and no
-	  // parse exception is thrown.
-	  // This is considered a feature and not a bug for now.
-	  continue;
-	}
-      } else {
-	lastToken = __lookahead;
-	current._addToken(__lookahead);
-	if(!__caseSensitive)
-	  current._addToken(_toggleCase(__lookahead));
-	__match(__lookahead);
-      }
-
-      // In Perl, a - is a token if it occurs at the beginning
-      // or end of the character class.  Anywhere else, it indicates
-      // a range.
-      // A byproduct of this implementation is that if a '-' occurs
-      // after the end of a range, it is interpreted as a '-' and no
-      // exception is thrown. e.g., the second dash in [a-z-x]
-      // This is considered a feature and not a bug for now.
-      if(__lookahead == '-'){
-	__match('-');
-	if(__lookahead == ']'){
-	  current._addToken('-');
-	  break;
-	} else if(__lookahead == '\\') {
-	  node = __backslashToken();
-	  --__position;
-	  if(node instanceof TokenNode)
-	    token = ((TokenNode)node)._token;
-	  else
-	    throw new MalformedPatternException(
-	   "Parse error: invalid range specified at position " + __bytesRead);
-	} else {
-	  token = __lookahead;
-	  __match(__lookahead);
-	}
-
-	if(token < lastToken)
-	  throw new MalformedPatternException(
-	 "Parse error: invalid range specified at position " + __bytesRead);
-	current._addTokenRange(lastToken + 1, token);
-	if(!__caseSensitive)
-	  current._addTokenRange(_toggleCase((char)(lastToken + 1)),
-				_toggleCase(token));
-      }
-    }
-
-    __match(']');
-    __inCharacterClass = false;
-    return current;
-  }
-
-
-  SyntaxNode _newTokenNode(char token, int position){
-    if(!__inCharacterClass && !__caseSensitive &&
-       (_isUpperCase(token) || _isLowerCase(token))){
-      CharacterClassNode node = new CharacterClassNode(position);
-      node._addToken(token);
-      node._addToken(_toggleCase(token));
-      return node;
-    }
-
-    return new TokenNode(token, position);
-  }
-
-
-  SyntaxTree _parse(char[] expression) throws MalformedPatternException {
-    SyntaxTree tree;
-
-    __openParen = __closeParen = 0;
-    __regularExpression = expression;
-    __bytesRead = 0;
-    __expressionLength = expression.length;
-    __inCharacterClass = false;
-
-    __position = 0;
-    __match(__lookahead); // Call match to read first input.
-
-    if(__lookahead == '^') {
-      __beginAnchor = true;
-      __match(__lookahead);
-    }
-
-    if(__expressionLength > 0 && expression[__expressionLength - 1] == '$') {
-      --__expressionLength;
-      __endAnchor = true;
-    }
-
-    if(__expressionLength > 1 || (__expressionLength == 1 && !__beginAnchor)) {
-      CatNode root;
-      root = new CatNode();
-      root._left  = __regex();
-      // end marker
-      root._right =
-	new TokenNode((char)LeafNode._END_MARKER_TOKEN, __position++);
-      tree = new SyntaxTree(root, __position);
-    } else 
-      tree = new
-	SyntaxTree(new TokenNode((char)LeafNode._END_MARKER_TOKEN, 0), 1);
-
-    tree._computeFollowPositions();
-
-    return tree;
-  }
-
-
-  /**
-   * Compiles an Awk regular expression into an AwkPattern instance that
-   * can be used by an AwkMatcher object to perform pattern matching.
-   * <p>
-   * @param pattern  An Awk regular expression to compile.
-   * @param options  A set of flags giving the compiler instructions on
-   *                 how to treat the regular expression.  Currently the
-   *                 only meaningful flag is AwkCompiler.CASE_INSENSITIVE_MASK.
-   * @return A Pattern instance constituting the compiled regular expression.
-   *         This instance will always be an AwkPattern and can be reliably
-   *         be casted to an AwkPattern.
-   * @exception MalformedPatternException  If the compiled expression
-   *  is not a valid Awk regular expression.
-   */
-  public Pattern compile(char[] pattern, int options)
-       throws MalformedPatternException
-  {
-    SyntaxTree tree;
-    AwkPattern regexp;
-
-    __beginAnchor   = __endAnchor = false;
-    __caseSensitive = ((options & CASE_INSENSITIVE_MASK) == 0);
-    __multiline     = ((options & MULTILINE_MASK) != 0);
-    tree   = _parse(pattern);
-    regexp = new AwkPattern(new String(pattern), tree);
-    regexp._options = options;
-    regexp._hasBeginAnchor = __beginAnchor;
-    regexp._hasEndAnchor   = __endAnchor;
-
-    return regexp;
-  }
-
-
-  /**
-   * Compiles an Awk regular expression into an AwkPattern instance that
-   * can be used by an AwkMatcher object to perform pattern matching.
-   * <p>
-   * @param pattern  An Awk regular expression to compile.
-   * @param options  A set of flags giving the compiler instructions on
-   *                 how to treat the regular expression.  Currently the
-   *                 only meaningful flag is AwkCompiler.CASE_INSENSITIVE_MASK.
-   * @return A Pattern instance constituting the compiled regular expression.
-   *         This instance will always be an AwkPattern and can be reliably
-   *         be casted to an AwkPattern.
-   * @exception MalformedPatternException  If the compiled expression
-   *  is not a valid Awk regular expression.
-   */
-  public Pattern compile(String pattern, int options)
-       throws MalformedPatternException
-  {
-    SyntaxTree tree;
-    AwkPattern regexp;
-
-    __beginAnchor = __endAnchor = false;
-    __caseSensitive = ((options & CASE_INSENSITIVE_MASK) == 0);
-    __multiline     = ((options & MULTILINE_MASK) != 0);
-    tree   = _parse(pattern.toCharArray());
-    regexp = new AwkPattern(pattern, tree);
-    regexp._options = options;
-    regexp._hasBeginAnchor = __beginAnchor;
-    regexp._hasEndAnchor   = __endAnchor;
-
-    return regexp;
-  }
-
-  /**
-   * Same as calling <b>compile(pattern, AwkCompiler.DEFAULT_MASK);</b>
-   * <p>
-   * @param pattern  A regular expression to compile.
-   * @return A Pattern instance constituting the compiled regular expression.
-   *         This instance will always be an AwkPattern and can be reliably
-   *         be casted to an AwkPattern.
-   * @exception MalformedPatternException  If the compiled expression
-   *  is not a valid Awk regular expression.
-   */
-  public Pattern compile(char[] pattern) throws MalformedPatternException {
-    return compile(pattern, DEFAULT_MASK);
-  }
-
-
-  /**
-   * Same as calling <b>compile(pattern, AwkCompiler.DEFAULT_MASK);</b>
-   * <p>
-   * @param pattern  A regular expression to compile.
-   * @return A Pattern instance constituting the compiled regular expression.
-   *         This instance will always be an AwkPattern and can be reliably
-   *         be casted to an AwkPattern.
-   * @exception MalformedPatternException  If the compiled expression
-   *  is not a valid Awk regular expression.
-   */
-  public Pattern compile(String pattern) throws MalformedPatternException {
-    return compile(pattern, DEFAULT_MASK);
-  }
-
-}
diff -Nru old\org\apache\oro\text\awk\AwkMatcher.java new\org\apache\oro\text\awk\AwkMatcher.java
--- old\org\apache\oro\text\awk\AwkMatcher.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\AwkMatcher.java	Thu Jan 01 01:00:00 1970
@@ -1,759 +0,0 @@
-/*
- * $Id: AwkMatcher.java,v 1.11 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.io.*;
-
-import org.apache.oro.text.regex.*;
-
-/**
- * The AwkMatcher class is used to match regular expressions
- * (conforming to the Awk regular expression syntax) generated by
- * AwkCompiler.  AwkMatcher only supports 8-bit ASCII.  Any attempt
- * to match Unicode values greater than 255 will result in undefined
- * behavior.  AwkMatcher finds true leftmost-longest matches, so
- * you must take care with how you formulate your regular expression
- * to avoid matching more than you really want.
- * <p>
- * It is important for you to remember that AwkMatcher does not save
- * parenthesized sub-group information.  Therefore the number of groups
- * saved in a MatchResult produced by AwkMatcher will always be 1.
- *
- * @version @version@
- * @since 1.0
- * @see org.apache.oro.text.regex.PatternMatcher
- * @see AwkCompiler
- */
-public final class AwkMatcher implements PatternMatcher {
-  private int __lastMatchedBufferOffset;
-  private AwkMatchResult __lastMatchResult = null;
-  private AwkStreamInput __scratchBuffer, __streamSearchBuffer;
-  private AwkPattern __awkPattern;
-  private int __offsets[] = new int[2];
-
-  /**
-   * A kluge variable to make PatternMatcherInput matches work when
-   * their begin offset is non-zero.  This kluge is caused by the
-   * misguided notion that AwkStreamInput could be overloaded to do
-   * both stream and fixed buffer matches.  The whole input representation
-   * scheme has to be scrapped and redone. -- dfs 2001/07/10
-   */
-  private int __beginOffset;
-
-  public AwkMatcher() {
-    __scratchBuffer = new AwkStreamInput();
-    __scratchBuffer._endOfStreamReached = true;
-  }
-
-  /**
-   * Determines if a prefix of a string (represented as a char[])
-   * matches a given pattern, starting from a given offset into the string.
-   * If a prefix of the string matches the pattern, a MatchResult instance
-   * representing the match is made accesible via
-   * {@link #getMatch()}.
-   * <p>
-   * This method is useful for certain common token identification tasks
-   * that are made more difficult without this functionality.
-   * <p>
-   * @param input  The char[] to test for a prefix match.
-   * @param pattern  The Pattern to be matched.
-   * @param offset The offset at which to start searching for the prefix.
-   * @return True if input matches pattern, false otherwise.
-   */
-  // I reimplemented this method in terms of streammatchesPrefix
-  // to reduce the code size.  This is not very elegant and
-  // reduces performance by a small degree.
-  public boolean matchesPrefix(char[] input, Pattern pattern, int offset){
-    int result = -1;
-
-    __awkPattern = (AwkPattern)pattern;
-
-    __scratchBuffer._buffer       = input;
-    __scratchBuffer._bufferSize   = input.length;
-    __scratchBuffer._bufferOffset = __beginOffset = 0;
-    __scratchBuffer._endOfStreamReached = true;
-    __streamSearchBuffer = __scratchBuffer;
-    __offsets[0] = offset;
-    try {
-      result = __streamMatchPrefix();
-    } catch(IOException e){
-      // Don't do anything because we're not doing any I/O
-      result = -1;
-    }
-
-    if(result < 0) {
-      __lastMatchResult = null;
-      return false;
-    }
-
-    __lastMatchResult =
-      new AwkMatchResult(new String(input, 0, result), offset);
-
-    return true;
-  }
-
-
-  /**
-   * Determines if a prefix of a string (represented as a char[])
-   * matches a given pattern.
-   * If a prefix of the string matches the pattern, a MatchResult instance
-   * representing the match is made accesible via
-   * {@link #getMatch()}.
-   * <p>
-   * This method is useful for certain common token identification tasks
-   * that are made more difficult without this functionality.
-   * <p>
-   * @param input  The char[] to test for a prefix match.
-   * @param pattern  The Pattern to be matched.
-   * @return True if input matches pattern, false otherwise.
-   */
-  public boolean matchesPrefix(char[] input, Pattern pattern){
-    return matchesPrefix(input, pattern, 0);
-  }
-
-
-  /**
-   * Determines if a prefix of a string matches a given pattern.
-   * If a prefix of the string matches the pattern, a MatchResult instance
-   * representing the match is made accesible via
-   * {@link #getMatch()}.
-   * <p>
-   * This method is useful for certain common token identification tasks
-   * that are made more difficult without this functionality.
-   * <p>
-   * @param input  The String to test for a prefix match.
-   * @param pattern  The Pattern to be matched.
-   * @return True if input matches pattern, false otherwise.
-   */
-  public boolean matchesPrefix(String input, Pattern pattern) {
-    return matchesPrefix(input.toCharArray(), pattern, 0);
-  }
-
-
-  /**
-   * Determines if a prefix of a PatternMatcherInput instance
-   * matches a given pattern.  If there is a match, a MatchResult instance
-   * representing the match is made accesible via
-   * {@link #getMatch()}.  Unlike the
-   * {@link #contains(PatternMatcherInput, Pattern)}
-   * method, the current offset of the PatternMatcherInput argument
-   * is not updated.  You should remember that the region starting
-   * from the begin offset of the PatternMatcherInput will be
-   * tested for a prefix match.
-   * <p>
-   * This method is useful for certain common token identification tasks
-   * that are made more difficult without this functionality.
-   * <p>
-   * @param input  The PatternMatcherInput to test for a prefix match.
-   * @param pattern  The Pattern to be matched.
-   * @return True if input matches pattern, false otherwise.
-   */
-  public boolean matchesPrefix(PatternMatcherInput input, Pattern pattern){
-    int result = -1;
-
-    __awkPattern = (AwkPattern)pattern;
-    __scratchBuffer._buffer       = input.getBuffer();
-    __scratchBuffer._bufferOffset = __beginOffset = input.getBeginOffset();
-    __offsets[0] = input.getCurrentOffset();
-
-    __scratchBuffer._bufferSize   = input.length();
-    __scratchBuffer._endOfStreamReached = true;
-    __streamSearchBuffer = __scratchBuffer;
-    try {
-      result = __streamMatchPrefix();
-    } catch(IOException e) {
-      // Don't do anything because we're not doing any I/O
-      result = -1;
-    }
-
-    if(result < 0) {
-      __lastMatchResult = null;
-      return false;
-    }
-
-    __lastMatchResult =
-      new AwkMatchResult(new String(__scratchBuffer._buffer, __offsets[0],
-				    result), __offsets[0]);
-
-    return true;
-  }
-
-
-
-  /**
-   * Determines if a string (represented as a char[]) exactly 
-   * matches a given pattern.  If
-   * there is an exact match, a MatchResult instance
-   * representing the match is made accesible via
-   * {@link #getMatch()}.  The pattern must be
-   * an AwkPattern instance, otherwise a ClassCastException will
-   * be thrown.  You are not required to, and indeed should NOT try to
-   * (for performance reasons), catch a ClassCastException because it
-   * will never be thrown as long as you use an AwkPattern as the pattern
-   * parameter.
-   * <p>
-   * @param input  The char[] to test for an exact match.
-   * @param pattern  The AwkPattern to be matched.
-   * @return True if input matches pattern, false otherwise.
-   * @exception ClassCastException If a Pattern instance other than an
-   *         AwkPattern is passed as the pattern parameter.
-   */
-  public boolean matches(char[] input, Pattern pattern) {
-    int result = -1;
-
-    __awkPattern = (AwkPattern)pattern;
-    __scratchBuffer._buffer       = input;
-    __scratchBuffer._bufferSize   = input.length;
-    __scratchBuffer._bufferOffset = __beginOffset = 0;
-    __scratchBuffer._endOfStreamReached = true;
-    __streamSearchBuffer = __scratchBuffer;
-    __offsets[0] = 0;
-    try {
-      result = __streamMatchPrefix();
-    } catch(IOException e){
-      // Don't do anything because we're not doing any I/O
-      result = -1;
-    }
-
-    if(result != input.length) {
-      __lastMatchResult = null;
-      return false;
-    }
-
-    __lastMatchResult =
-      new AwkMatchResult(new String(input, 0, result), 0);
-
-    return true;
-  }
-
-
-
-
-  /**
-   * Determines if a string exactly matches a given pattern.  If
-   * there is an exact match, a MatchResult instance
-   * representing the match is made accesible via
-   * {@link #getMatch()}.  The pattern must be
-   * a AwkPattern instance, otherwise a ClassCastException will
-   * be thrown.  You are not required to, and indeed should NOT try to
-   * (for performance reasons), catch a ClassCastException because it
-   * will never be thrown as long as you use an AwkPattern as the pattern
-   * parameter.
-   * <p>
-   * @param input  The String to test for an exact match.
-   * @param pattern  The AwkPattern to be matched.
-   * @return True if input matches pattern, false otherwise.
-   * @exception ClassCastException If a Pattern instance other than an
-   *         AwkPattern is passed as the pattern parameter.
-   */
-  public boolean matches(String input, Pattern pattern){
-    return matches(input.toCharArray(), pattern);
-  }
-
-
-  /**
-   * Determines if the contents of a PatternMatcherInput instance
-   * exactly matches a given pattern.  If
-   * there is an exact match, a MatchResult instance
-   * representing the match is made accesible via
-   * {@link #getMatch()}.  Unlike the
-   * {@link #contains(PatternMatcherInput, Pattern)}
-   * method, the current offset of the PatternMatcherInput argument
-   * is not updated.  You should remember that the region between
-   * the begin and end offsets of the PatternMatcherInput will be
-   * tested for an exact match.
-   * <p>
-   * The pattern must be an AwkPattern instance, otherwise a
-   * ClassCastException will be thrown.  You are not required to, and 
-   * indeed should NOT try to (for performance reasons), catch a
-   * ClassCastException because it will never be thrown as long as you use
-   * an AwkPattern as the pattern parameter.
-   * <p>
-   * @param input  The PatternMatcherInput to test for a match.
-   * @param pattern  The AwkPattern to be matched.
-   * @return True if input matches pattern, false otherwise.
-   * @exception ClassCastException If a Pattern instance other than an
-   *         AwkPattern is passed as the pattern parameter.
-   */
-  public boolean matches(PatternMatcherInput input, Pattern pattern){
-    int result = -1;
-
-    __awkPattern = (AwkPattern)pattern;
-    __scratchBuffer._buffer       = input.getBuffer();
-    __scratchBuffer._bufferSize   = input.length();
-    __scratchBuffer._bufferOffset = __beginOffset = input.getBeginOffset();
-    __offsets[0] = input.getBeginOffset();
-    __scratchBuffer._endOfStreamReached = true;
-    __streamSearchBuffer = __scratchBuffer;
-    try {
-      result = __streamMatchPrefix();
-    } catch(IOException e){
-      // Don't do anything because we're not doing any I/O
-      result = -1;
-    }
-
-    if(result != __scratchBuffer._bufferSize) {
-      __lastMatchResult = null;
-      return false;
-    }
-
-    __lastMatchResult =
-      new AwkMatchResult(new String(__scratchBuffer._buffer, __offsets[0],
-			     __scratchBuffer._bufferSize), __offsets[0]);
-
-    return true;
-  }
-
-
-
-  /**
-   * Determines if a string (represented as a char[]) contains a pattern.
-   * If the pattern is
-   * matched by some substring of the input, a MatchResult instance
-   * representing the <b> first </b> such match is made acessible via 
-   * {@link #getMatch()}.  If you want to access
-   * subsequent matches you should either use a PatternMatcherInput object
-   * or use the offset information in the MatchResult to create a substring
-   * representing the remaining input.  Using the MatchResult offset 
-   * information is the recommended method of obtaining the parts of the
-   * string preceeding the match and following the match.
-   * <p>
-   * The pattern must be an AwkPattern instance, otherwise a
-   * ClassCastException will be thrown.  You are not required to, and 
-   * indeed should NOT try to (for performance reasons), catch a
-   * ClassCastException because it will never be thrown as long as you use
-   * an AwkPattern as the pattern parameter.
-   * <p>
-   * @param input  The char[] to test for a match.
-   * @param pattern  The AwkPattern to be matched.
-   * @return True if the input contains a pattern match, false otherwise.
-   * @exception ClassCastException If a Pattern instance other than an
-   *         AwkPattern is passed as the pattern parameter.
-   */
-  public boolean contains(char[] input, Pattern pattern) {
-    __awkPattern = (AwkPattern)pattern;
-
-    // Begin anchor requires match occur at beginning of input
-    if(__awkPattern._hasBeginAnchor && !__awkPattern._fastMap[input[0]]){
-      __lastMatchResult = null;
-      return false;
-    }
-
-    __scratchBuffer._buffer       = input;
-    __scratchBuffer._bufferSize   = input.length;
-    __scratchBuffer._bufferOffset = __beginOffset = 0;
-    __scratchBuffer._endOfStreamReached = true;
-    __streamSearchBuffer = __scratchBuffer;
-    __lastMatchedBufferOffset = 0;
-    try {
-      _search();
-    } catch(IOException e) {
-      // do nothing
-    }
-    return (__lastMatchResult != null);
-  }
-
-
-  /**
-   * Determines if a string contains a pattern.  If the pattern is
-   * matched by some substring of the input, a MatchResult instance
-   * representing the <b> first </b> such match is made acessible via 
-   * {@link #getMatch()}.  If you want to access
-   * subsequent matches you should either use a PatternMatcherInput object
-   * or use the offset information in the MatchResult to create a substring
-   * representing the remaining input.  Using the MatchResult offset 
-   * information is the recommended method of obtaining the parts of the
-   * string preceeding the match and following the match.
-   * <p>
-   * The pattern must be an AwkPattern instance, otherwise a
-   * ClassCastException will be thrown.  You are not required to, and 
-   * indeed should NOT try to (for performance reasons), catch a
-   * ClassCastException because it will never be thrown as long as you use
-   * an AwkPattern as the pattern parameter.
-   * <p>
-   * @param input  The String to test for a match.
-   * @param pattern  The AwkPattern to be matched.
-   * @return True if the input contains a pattern match, false otherwise.
-   * @exception ClassCastException If a Pattern instance other than an
-   *         AwkPattern is passed as the pattern parameter.
-   */
-  public boolean contains(String input, Pattern pattern){
-    return contains(input.toCharArray(), pattern);
-  }
-
-
-
-  /**
-   * Determines if the contents of a PatternMatcherInput, starting from the
-   * current offset of the input contains a pattern.
-   * If a pattern match is found, a MatchResult
-   * instance representing the <b>first</b> such match is made acessible via 
-   * {@link #getMatch()}.  The current offset of the
-   * PatternMatcherInput is set to the offset corresponding to the end
-   * of the match, so that a subsequent call to this method will continue
-   * searching where the last call left off.  You should remember that the
-   * region between the begin and end offsets of the PatternMatcherInput are
-   * considered the input to be searched, and that the current offset
-   * of the PatternMatcherInput reflects where a search will start from.
-   * Matches extending beyond the end offset of the PatternMatcherInput
-   * will not be matched.  In other words, a match must occur entirely
-   * between the begin and end offsets of the input.  See
-   * {@link org.apache.oro.text.regex.PatternMatcherInput PatternMatcherInput}
-   * for more details.
-   * <p>
-   * As a side effect, if a match is found, the PatternMatcherInput match
-   * offset information is updated.  See the PatternMatcherInput
-   * {@link org.apache.oro.text.regex.PatternMatcherInput#setMatchOffsets
-   * setMatchOffsets(int, int)} method for more details.                  
-   * <p>
-   * The pattern must be an AwkPattern instance, otherwise a
-   * ClassCastException will be thrown.  You are not required to, and 
-   * indeed should NOT try to (for performance reasons), catch a
-   * ClassCastException because it will never be thrown as long as you use
-   * an AwkPattern as the pattern parameter.
-   * <p>
-   * This method is usually used in a loop as follows:
-   * <blockquote><pre>
-   * PatternMatcher matcher;
-   * PatternCompiler compiler;
-   * Pattern pattern;
-   * PatternMatcherInput input;
-   * MatchResult result;
-   *
-   * compiler = new AwkCompiler();
-   * matcher  = new AwkMatcher();
-   *
-   * try {
-   *   pattern = compiler.compile(somePatternString);
-   * } catch(MalformedPatternException e) {
-   *   System.err.println("Bad pattern.");
-   *   System.err.println(e.getMessage());
-   *   return;
-   * }
-   *
-   * input   = new PatternMatcherInput(someStringInput);
-   *
-   * while(matcher.contains(input, pattern)) {
-   *   result = matcher.getMatch();  
-   *   // Perform whatever processing on the result you want.
-   * }
-   *
-   * </pre></blockquote>
-   * <p>
-   * @param input  The PatternMatcherInput to test for a match.
-   * @param pattern  The Pattern to be matched.
-   * @return True if the input contains a pattern match, false otherwise.
-   * @exception ClassCastException If a Pattern instance other than an
-   *         AwkPattern is passed as the pattern parameter.
-   */
-  public boolean contains(PatternMatcherInput input, Pattern pattern) {
-    __awkPattern = (AwkPattern)pattern;
-    __scratchBuffer._buffer       = input.getBuffer();
-    __scratchBuffer._bufferOffset = __beginOffset = input.getBeginOffset();
-    __lastMatchedBufferOffset = input.getCurrentOffset();
-
-    // Begin anchor requires match occur at beginning of input
-    // No need to adjust current offset if no match found.
-    if(__awkPattern._hasBeginAnchor) {
-      if(__beginOffset != __lastMatchedBufferOffset ||
-	 !__awkPattern._fastMap[__scratchBuffer._buffer[__beginOffset]]) {
-	__lastMatchResult = null;
-	return false;
-      }
-    }
-
-    __scratchBuffer._bufferSize = input.length();
-    __scratchBuffer._endOfStreamReached = true;
-    __streamSearchBuffer = __scratchBuffer;
-    try {
-      _search();
-    } catch(IOException e) {
-      // do nothing
-    }
-    input.setCurrentOffset(__lastMatchedBufferOffset);
-
-    if(__lastMatchResult == null)
-      return false;
-
-    input.setMatchOffsets(__lastMatchResult.beginOffset(0),
-			  __lastMatchResult.endOffset(0));
-
-    return true;
-  }
-
-
-  /**
-   * Determines if the contents of an AwkStreamInput, starting from the
-   * current offset of the input contains a pattern.
-   * If a pattern match is found, a MatchResult
-   * instance representing the <b>first</b> such match is made acessible via 
-   * {@link #getMatch()}.  The current offset of the
-   * input stream is advanced to the end offset corresponding to the end
-   * of the match.  Consequently a subsequent call to this method will continue
-   * searching where the last call left off.
-   * See {@link AwkStreamInput} for more details.
-   * <p>
-   * Note, patterns matching the null string do NOT match at end of input
-   * stream. This is different from the behavior you get from the other
-   * contains() methods.
-   * <p>
-   * The pattern must be an AwkPattern instance, otherwise a
-   * ClassCastException will be thrown.  You are not required to, and 
-   * indeed should NOT try to (for performance reasons), catch a
-   * ClassCastException because it will never be thrown as long as you use
-   * an AwkPattern as the pattern parameter.
-   * <p>
-   * This method is usually used in a loop as follows:
-   * <blockquote><pre>
-   * PatternMatcher matcher;
-   * PatternCompiler compiler;
-   * Pattern pattern;
-   * AwkStreamInput input;
-   * MatchResult result;
-   *
-   * compiler = new AwkCompiler();
-   * matcher  = new AwkMatcher();
-   *
-   * try {
-   *   pattern = compiler.compile(somePatternString);
-   * } catch(MalformedPatternException e) {
-   *   System.err.println("Bad pattern.");
-   *   System.err.println(e.getMessage());
-   *   return;
-   * }
-   *
-   * input   = new AwkStreamInput(
-   *             new BufferedInputStream(new FileInputStream(someFileName)));
-   *
-   * while(matcher.contains(input, pattern)) {
-   *   result = matcher.getMatch();  
-   *   // Perform whatever processing on the result you want.
-   * }
-   *
-   * </pre></blockquote>
-   * <p>
-   * @param input  The PatternStreamInput to test for a match.
-   * @param pattern  The Pattern to be matched.
-   * @return True if the input contains a pattern match, false otherwise.
-   * @exception ClassCastException If a Pattern instance other than an
-   *         AwkPattern is passed as the pattern parameter.
-   */
-  public boolean contains(AwkStreamInput input, Pattern pattern)
-       throws IOException
-  {
-    __awkPattern = (AwkPattern)pattern;
-
-    // Begin anchor requires match occur at beginning of input
-    if(__awkPattern._hasBeginAnchor) {
-      // Do read here instead of in _search() so we can test first char
-      if(input._bufferOffset == 0) {
-	if(input.read() && !__awkPattern._fastMap[input._buffer[0]]) {
-	  __lastMatchResult = null;
-	  return false;
-	}
-      } else {
-	__lastMatchResult = null;
-	return false;
-      }
-    }
-
-    __lastMatchedBufferOffset = input._currentOffset;
-    __streamSearchBuffer = input;
-    __beginOffset = 0;
-    _search();
-    input._currentOffset = __lastMatchedBufferOffset;
-
-    if(__lastMatchResult != null) {
-      // Adjust match begin offset to be relative to beginning of stream.
-      __lastMatchResult._incrementMatchBeginOffset(input._bufferOffset);
-      return true;
-    }
-
-    return false;
-  }
-
-
-  private int __streamMatchPrefix() throws IOException {
-    int token, current = AwkPattern._START_STATE, lastState;
-    int offset, initialOffset, maxOffset;
-    int lastMatchedOffset = -1;
-    int[] tstateArray;
-
-    offset = initialOffset = __offsets[0];
-    maxOffset = __streamSearchBuffer._bufferSize + __beginOffset;
-
-  test:
-    while(offset < maxOffset) {
-      token = __streamSearchBuffer._buffer[offset++];
-
-      if(current < __awkPattern._numStates) {
-	lastState = current;
-	tstateArray = __awkPattern._getStateArray(current);
-	current = tstateArray[token];
-
-	if(current == 0){
-	  __awkPattern._createNewState(lastState, token, tstateArray);
-	  current = tstateArray[token];
-	}
-
-	if(current == AwkPattern._INVALID_STATE){
-	  break test;
-	} else if(__awkPattern._endStates.get(current)){
-	  lastMatchedOffset = offset;
-	}
-
-	if(offset == maxOffset){
-	  offset =
-	    __streamSearchBuffer._reallocate(initialOffset) + __beginOffset;
-	  
-	  maxOffset = __streamSearchBuffer._bufferSize + __beginOffset;
-
-	  // If we're at the end of the stream, don't reset values
-	  if(offset != maxOffset){
-	    if(lastMatchedOffset != -1)
-	      lastMatchedOffset-=initialOffset;
-	    initialOffset = 0;
-	  }
-	}
-      } else
-	break;
-    }
-
-    __offsets[0] = initialOffset;
-    __offsets[1] = lastMatchedOffset - 1;
-
-    if(lastMatchedOffset == -1 && __awkPattern._matchesNullString)
-      return 0;
-
-    // End anchor requires match occur at end of input
-    if(__awkPattern._hasEndAnchor &&
-       (!__streamSearchBuffer._endOfStreamReached ||
-	lastMatchedOffset < __streamSearchBuffer._bufferSize + __beginOffset))
-      return -1;
-
-    return (lastMatchedOffset - initialOffset);
-  }
-
-
-
-   void _search() throws IOException {
-    int position, tokensMatched;
-
-    __lastMatchResult = null;
-
-    while(true){
-      if(__lastMatchedBufferOffset >= 
-	 __streamSearchBuffer._bufferSize + __beginOffset) {
-	if(__streamSearchBuffer._endOfStreamReached){
-	  // Get rid of reference now that it should no longer be used.
-	  __streamSearchBuffer = null;
-	  return;
-	} else {
-	  if(!__streamSearchBuffer.read())
-	    return;
-	  __lastMatchedBufferOffset = 0;
-	}
-      }
-
-      for(position = __lastMatchedBufferOffset;
-	  position < __streamSearchBuffer._bufferSize + __beginOffset;
-	  position = __offsets[0] + 1) {
-
-	__offsets[0] = position;
-	if(__awkPattern._fastMap[__streamSearchBuffer._buffer[position]] &&
-	   (tokensMatched = __streamMatchPrefix()) > -1) {
-
-	  __lastMatchResult  = new AwkMatchResult(
-	  new String(__streamSearchBuffer._buffer, __offsets[0],
-		     tokensMatched), __offsets[0]);
-
-	  __lastMatchedBufferOffset =
-	    (tokensMatched > 0 ? __offsets[1] + 1 : __offsets[0] + 1);
-
-	  return;
-	} else if(__awkPattern._matchesNullString) {
-	  __lastMatchResult  = new AwkMatchResult(new String(), position);
-
-	  __lastMatchedBufferOffset = position + 1;
-
-	  return;
-	}
-      }
-
-      __lastMatchedBufferOffset = position;
-    }
-  }
-
-
-  /**
-   * Fetches the last match found by a call to a matches() or contains()
-   * method.
-   * <p>
-   * @return A MatchResult instance containing the pattern match found
-   *         by the last call to any one of the matches() or contains()
-   *         methods.  If no match was found by the last call, returns
-   *         null.
-   */
-  public MatchResult getMatch() { return __lastMatchResult; }
-
-}
-
-
-
-
diff -Nru old\org\apache\oro\text\awk\AwkMatchResult.java new\org\apache\oro\text\awk\AwkMatchResult.java
--- old\org\apache\oro\text\awk\AwkMatchResult.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\AwkMatchResult.java	Thu Jan 01 01:00:00 1970
@@ -1,208 +0,0 @@
-/*
- * $Id: AwkMatchResult.java,v 1.8 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import org.apache.oro.text.regex.*;
-
-/**
- * A class used to store and access the results of an AwkPattern match.
- * It is important for you to remember that AwkMatcher does not save
- * parenthesized sub-group information.  Therefore the number of groups
- * saved in an AwkMatchResult will always be 1.
- *
- * @version @version@
- * @since 1.0
- * @see org.apache.oro.text.regex.PatternMatcher
- * @see AwkMatcher
- * @see AwkCompiler
- */
-
-final class AwkMatchResult implements MatchResult {
-  /**
-   * The character offset into the line or stream where the match
-   * begins.  Pattern matching methods that look for matches a line at
-   * a time should use this field as the offset into the line
-   * of the match.  Methods that look for matches independent of line
-   * boundaries should use this field as the offset into the entire
-   * text stream.
-   */
-  private int __matchBeginOffset;
-
-
-  /**
-   * The length of the match.  Stored as a convenience to avoid calling
-   * the String length().  Since groups  aren't saved, all we need is the
-   * length and the offset into the stream.
-   */
-  private int __length;
-
-
-  /**
-   * The entire string that matched the pattern.
-   */
-  private String __match;
-
-
-  /**
-   * Default constructor given default access to prevent instantiation
-   * outside the package.
-   */
-  AwkMatchResult(String match, int matchBeginOffset){
-    __match            = match;
-    __length           = match.length();
-    __matchBeginOffset = matchBeginOffset;
-  }
-
-
-  /**
-   * Adjusts the relative offset where the match begins to an absolute
-   * value.  Only used by AwkMatcher to adjust the offset for stream
-   * matches.
-   */
-  void _incrementMatchBeginOffset(int streamOffset) {
-    __matchBeginOffset+=streamOffset;
-  }
-
-  /**
-   * @return The length of the match.
-   */
-  public int length(){ return __length; }
-
-
-  /**
-   * @return The number of groups contained in the result.  This number
-   *         includes the 0th group.  In other words, the result refers
-   *         to the number of parenthesized subgroups plus the entire match
-   *         itself.  Because Awk doesn't save parenthesized groups, this
-   *         always returns 1.
-   */
-  public int groups(){ return 1; }
-
-
-  /**
-   * @param group The pattern subgroup to return.
-   * @return A string containing the indicated pattern subgroup.  Group
-   *         0 always refers to the entire match.  If a group was never
-   *         matched, it returns null.  This is not to be confused with
-   *         a group matching the null string, which will return a String
-   *         of length 0.
-   */
-  public String group(int group){ return (group == 0 ? __match : null); }
-
-
-  /**
-   * @param group The pattern subgroup.
-   * @return The offset into group 0 of the first token in the indicated
-   *         pattern subgroup.  If a group was never matched or does
-   *         not exist, returns -1.
-   */
-  public int begin(int group){ return (group == 0 ? 0 : -1); }
-
-  /**
-   * @param group The pattern subgroup.
-   * @return Returns one plus the offset into group 0 of the last token in
-   *         the indicated pattern subgroup.  If a group was never matched
-   *         or does not exist, returns -1.  A group matching the null
-   *         string will return its start offset.
-   */
-  public int end(int group){ return (group == 0 ? __length : -1); }
-
-
-  /**
-   * Returns an offset marking the beginning of the pattern match
-   * relative to the beginning of the input.
-   * <p>
-   * @param group The pattern subgroup.
-   * @return The offset of the first token in the indicated
-   *         pattern subgroup.  If a group was never matched or does
-   *         not exist, returns -1.
-   */
-  public int beginOffset(int group){
-    return (group == 0 ? __matchBeginOffset : -1);
-  }
-
-  /**
-   * Returns an offset marking the end of the pattern match 
-   * relative to the beginning of the input.
-   * <p>
-   * @param group The pattern subgroup.
-   * @return Returns one plus the offset of the last token in
-   *         the indicated pattern subgroup.  If a group was never matched
-   *         or does not exist, returns -1.  A group matching the null
-   *         string will return its start offset.
-   */
-  public int endOffset(int group){
-    return (group == 0 ? __matchBeginOffset + __length : -1);
-  }
-
-
-  /**
-   * The same as group(0).
-   *
-   * @return A string containing the entire match.
-   */
-  public String toString() { return group(0); }
-
-}
-
-
-
-
-
-
diff -Nru old\org\apache\oro\text\awk\AwkPattern.java new\org\apache\oro\text\awk\AwkPattern.java
--- old\org\apache\oro\text\awk\AwkPattern.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\AwkPattern.java	Thu Jan 01 01:00:00 1970
@@ -1,208 +0,0 @@
-/*
- * $Id: AwkPattern.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.io.Serializable;
-import java.util.*;
-
-import org.apache.oro.text.regex.*;
-
-
-final class DFAState {
-  int _stateNumber;
-  BitSet _state;
-
-  DFAState(BitSet s, int num){
-    _state = s;
-    _stateNumber = num;
-  }
-}
-
-/**
- * An implementation of the Pattern interface for Awk regular expressions.
- * This class is compatible with the AwkCompiler and AwkMatcher
- * classes.  When an AwkCompiler instance compiles a regular expression
- * pattern, it produces an AwkPattern instance containing internal
- * data structures used by AwkMatcher to perform pattern matches.
- * This class cannot be subclassed and cannot be directly instantiated
- * by the programmer as it would not make sense.  It is however serializable
- * so that pre-compiled patterns may be saved to disk and re-read at a later
- * time.  AwkPattern instances should only be created through calls to an
- * AwkCompiler instance's compile() methods
- * 
- * @version @version@
- * @since 1.0
- * @see AwkCompiler
- * @see AwkMatcher
- */
-public final class AwkPattern implements Pattern, Serializable {
-  final static int _INVALID_STATE = -1, _START_STATE = 1; 
-
-  int _numStates, _endPosition, _options;
-  String _expression;
-  Vector _Dtrans, _nodeList[], _stateList;
-  BitSet _U, _emptySet, _followSet[], _endStates;
-  Hashtable _stateMap;
-  boolean _matchesNullString, _fastMap[];
-  boolean _hasBeginAnchor = false, _hasEndAnchor = false;
-
-  AwkPattern(String expression, SyntaxTree tree){
-    int token, node, tstateArray[];
-    DFAState dfaState;
-
-    _expression = expression;
-
-    // Assume endPosition always occurs at end of parse.
-    _endPosition = tree._positions - 1;
-    _followSet   = tree._followSet;
-
-    _Dtrans    = new Vector();
-    _stateList = new Vector();
-    _endStates = new BitSet();
-
-    _U        = new BitSet(tree._positions);
-    _U.or(tree._root._firstPosition());
-
-    tstateArray = new int[LeafNode._NUM_TOKENS];
-    _Dtrans.addElement(tstateArray); // this is a dummy entry because we
-                                     // number our states starting from 1
-    _Dtrans.addElement(tstateArray);
-
-    _numStates = _START_STATE;
-    if(_U.get(_endPosition))
-      _endStates.set(_numStates);
-    dfaState = new DFAState((BitSet)_U.clone(), _numStates);
-    _stateMap = new Hashtable();
-    _stateMap.put(dfaState._state, dfaState);
-    _stateList.addElement(dfaState); // this is a dummy entry because we
-                                     // number our states starting from 1
-    _stateList.addElement(dfaState);
-    _numStates++;
-
-    _U.xor(_U);  // clear bits
-    _emptySet = new BitSet(tree._positions);
-
-    _nodeList = new Vector[LeafNode._NUM_TOKENS];
-    for(token = 0; token < LeafNode._NUM_TOKENS; token++){
-      _nodeList[token] = new Vector();
-      for(node=0; node < tree._positions; node++)
-	if(tree._nodes[node]._matches((char)token))
-	  _nodeList[token].addElement(tree._nodes[node]);
-    }
-
-    _fastMap = tree.createFastMap();
-    _matchesNullString = _endStates.get(_START_STATE);
-  }
-
-  // tstateArray is assumed to have been set before calling this method
-  void _createNewState(int current, int token, int[] tstateArray) {
-    int node, pos;
-    DFAState T, dfaState;
-
-    T    = (DFAState)_stateList.elementAt(current);
-    node = _nodeList[token].size();
-    _U.xor(_U);  // clear bits
-    while(node-- > 0){
-      pos = ((LeafNode)_nodeList[token].elementAt(node))._position;
-      if(T._state.get(pos))
-	_U.or(_followSet[pos]);
-    }
-
-    if(!_stateMap.containsKey(_U)){
-      dfaState = new DFAState((BitSet)_U.clone(), _numStates++);
-      _stateList.addElement(dfaState);
-      _stateMap.put(dfaState._state, dfaState);
-      _Dtrans.addElement(new int[LeafNode._NUM_TOKENS]);
-
-      if(!_U.equals(_emptySet)){
-	tstateArray[token] = _numStates - 1;
-
-	if(_U.get(_endPosition))
-	  _endStates.set(_numStates - 1);
-      } else
-	tstateArray[token] = _INVALID_STATE;
-    } else {
-      if(_U.equals(_emptySet))
-	tstateArray[token] = _INVALID_STATE;
-      else 
-	tstateArray[token] = ((DFAState)_stateMap.get(_U))._stateNumber;
-    }
-  }
-
-  int[] _getStateArray(int state) { return ((int[])_Dtrans.elementAt(state)); }
-
-
-  /**
-   * This method returns the string representation of the pattern.
-   * <p>
-   * @return The original string representation of the regular expression
-   *         pattern.
-   */
-  public String getPattern() { return _expression; }
-
-
-  /**
-   * This method returns an integer containing the compilation options used
-   * to compile this pattern.
-   * <p>
-   * @return The compilation options used to compile the pattern.
-   */
-  public int getOptions()    { return _options; }
-}
-
diff -Nru old\org\apache\oro\text\awk\AwkStreamInput.java new\org\apache\oro\text\awk\AwkStreamInput.java
--- old\org\apache\oro\text\awk\AwkStreamInput.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\AwkStreamInput.java	Thu Jan 01 01:00:00 1970
@@ -1,183 +0,0 @@
-/*
- * $Id: AwkStreamInput.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.io.*;
-import org.apache.oro.text.regex.*;
-
-/**
- * The AwkStreamInput class is used to look for pattern matches in an
- * input stream (actually a java.io.Reader instance) in conjunction with
- * the AwkMatcher class.  It is called
- * AwkStreamInput instead of AwkInputStream to stress that it is a form
- * of streamed input for the AwkMatcher class to use rather than a subclass of
- * InputStream.
- * AwkStreamInput performs special internal buffering to accelerate
- * pattern searches through a stream.  You can determine the size of this
- * buffer and how it grows by using the appropriate constructor.
- * <p>
- * If you want to perform line by line
- * matches on an input stream, you should use a DataInput or BufferedReader
- * instance in conjunction
- * with one of the PatternMatcher methods taking a String, char[], or
- * PatternMatcherInput as an argument.  The DataInput and BufferedReader
- * readLine() methods will likely be implemented as native methods and
- * therefore more efficient than supporting line by line searching within
- * AwkStreamInput.
- * <p>
- * In the future the programmer will be able to set this class to save
- * all the input it sees so that it can be accessed later.  This will avoid
- * having to read a stream more than once for whatever reason.
- *
- * @version @version@
- * @since 1.0
- * @see AwkMatcher
- */
-public final class AwkStreamInput {
-  static final int _DEFAULT_BUFFER_INCREMENT = 2048;
-  private Reader __searchStream;
-  private int __bufferIncrementUnit;
-  boolean _endOfStreamReached;
-  // The offset into the stream corresponding to buffer[0]
-  int _bufferSize, _bufferOffset, _currentOffset;
-  char[] _buffer;
-
-  /**
-   * We use this default contructor only within the package to create a dummy
-   * AwkStreamInput instance.
-   */
-  AwkStreamInput() {
-    _currentOffset = 0;
-  }
-
-
-  /**
-   * Creates an AwkStreamInput instance bound to a Reader with a
-   * specified initial buffer size and default buffer increment.
-   * <p>
-   * @param input  The InputStream to associate with the AwkStreamInput
-   *        instance.
-   * @param bufferIncrement  The initial buffer size and the default buffer
-   *      increment to use when the input buffer has to be increased in
-   *      size.
-   */
-  public AwkStreamInput(Reader input, int bufferIncrement) {
-    __searchStream = input;
-    __bufferIncrementUnit = bufferIncrement;
-    _buffer = new char[bufferIncrement];
-    _bufferOffset = _bufferSize  =  _currentOffset = 0;
-    _endOfStreamReached = false;
-  }
-
-
-  /**
-   * Creates an AwkStreamInput instance bound to a Reader with an
-   * initial buffer size and default buffer increment of 2048 bytes.
-   * <p>
-   * @param input  The InputStream to associate with the AwkStreamInput
-   *        instance.
-   */
-  public AwkStreamInput(Reader input) {
-    this(input, _DEFAULT_BUFFER_INCREMENT);
-  }
-
-  // Only called when buffer overflows
-  int _reallocate(int initialOffset) throws IOException {
-    int offset, bytesRead;
-    char[] tmpBuffer;
-
-    if(_endOfStreamReached)
-      return _bufferSize;
-
-    offset    = _bufferSize - initialOffset;
-    tmpBuffer = new char[offset + __bufferIncrementUnit];
-
-    bytesRead =
-      __searchStream.read(tmpBuffer, offset, __bufferIncrementUnit);
-
-    if(bytesRead <= 0){
-      _endOfStreamReached = true;
-      /* bytesRead should never equal zero, but if it does, we don't
-	 want to continue to try and read, running the risk of entering
-	 an infinite loop.  Throw an IOException instead, because this
-	 really IS an exception. */
-      if(bytesRead == 0)
-	throw new IOException("read from input stream returned 0 bytes.");
-      return _bufferSize;
-    } else {
-      _bufferOffset += initialOffset;
-      _bufferSize = offset + bytesRead;
-
-      System.arraycopy(_buffer, initialOffset, tmpBuffer, 0, offset);
-      _buffer = tmpBuffer;
-    }
-
-    return offset;
-  }
-
-  boolean read() throws IOException {
-    _bufferOffset+=_bufferSize;
-    _bufferSize = __searchStream.read(_buffer);
-    _endOfStreamReached = (_bufferSize == -1);
-    return (!_endOfStreamReached);
-  }
-
-  public boolean endOfStream() { return _endOfStreamReached; }
-
-}
diff -Nru old\org\apache\oro\text\awk\CatNode.java new\org\apache\oro\text\awk\CatNode.java
--- old\org\apache\oro\text\awk\CatNode.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\CatNode.java	Thu Jan 01 01:00:00 1970
@@ -1,132 +0,0 @@
-/*
- * $Id: CatNode.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.util.*;
-
-/**
- * @version @version@
- * @since 1.0
- */
-final class CatNode extends SyntaxNode {
-  SyntaxNode _left, _right;
-
-  boolean _nullable() {
-    return (_left._nullable() && _right._nullable());
-  }
-
-  BitSet _firstPosition() {
-    if(_left._nullable()){
-      BitSet ls, rs, bs;
-
-      ls = _left._firstPosition();
-      rs = _right._firstPosition();
-      bs = new BitSet(Math.max(ls.size(), rs.size()));
-      bs.or(rs);
-      bs.or(ls);
-
-      return bs;
-    }
-
-    return _left._firstPosition();
-  }
-
-  BitSet _lastPosition()  {
-    if(_right._nullable()) {
-      BitSet ls, rs, bs;
-
-      ls = _left._lastPosition();
-      rs = _right._lastPosition();
-      bs = new BitSet(Math.max(ls.size(), rs.size()));
-      bs.or(rs);
-      bs.or(ls);
-
-      return bs;
-    }
-
-    return _right._lastPosition();
-  }
-
-
-  void _followPosition(BitSet[] follow, SyntaxNode[] nodes)  {
-    int size;
-    BitSet leftLast, rightFirst;
-
-    _left._followPosition(follow, nodes);
-    _right._followPosition(follow, nodes);
-
-    leftLast   = _left._lastPosition();
-    rightFirst = _right._firstPosition();
-
-    size = leftLast.size();
-    while(0 < size--)
-      if(leftLast.get(size))
-	follow[size].or(rightFirst);
-  }
-
-  SyntaxNode _clone(int pos[]) {
-    CatNode node;
-
-    node        = new CatNode();
-    node._left  = _left._clone(pos);
-    node._right = _right._clone(pos);
-
-    return node;
-  }
-}
diff -Nru old\org\apache\oro\text\awk\CharacterClassNode.java new\org\apache\oro\text\awk\CharacterClassNode.java
--- old\org\apache\oro\text\awk\CharacterClassNode.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\CharacterClassNode.java	Thu Jan 01 01:00:00 1970
@@ -1,91 +0,0 @@
-/*
- * $Id: CharacterClassNode.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.util.*;
-
-/**
- * @version @version@
- * @since 1.0
- */
-class CharacterClassNode extends LeafNode {
-  BitSet _characterSet;
-
-  CharacterClassNode(int position) {
-    super(position);
-    _characterSet = new BitSet(LeafNode._NUM_TOKENS + 1);
-  }
-
-  void _addToken(int token) { _characterSet.set(token); }
-
-  void _addTokenRange(int min, int max) {
-    while(min <= max)
-      _characterSet.set(min++);
-  }
-
-  boolean _matches(char token) { return _characterSet.get(token); }
-
-  SyntaxNode _clone(int pos[]) {
-    CharacterClassNode node;
-
-    node               = new CharacterClassNode(pos[0]++);
-    node._characterSet = (BitSet)_characterSet.clone();
-    return node;
-  }
-}
diff -Nru old\org\apache\oro\text\awk\EpsilonNode.java new\org\apache\oro\text\awk\EpsilonNode.java
--- old\org\apache\oro\text\awk\EpsilonNode.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\EpsilonNode.java	Thu Jan 01 01:00:00 1970
@@ -1,79 +0,0 @@
-/*
- * $Id: EpsilonNode.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.util.*;
-
-/**
- * @version @version@
- * @since 1.0
- */
-final class EpsilonNode extends SyntaxNode {
-  BitSet _positionSet = new BitSet(1);
-
-  boolean _nullable()     { return true; }
-  BitSet _firstPosition() { return _positionSet; }
-  BitSet _lastPosition()  { return _positionSet; }
-  void _followPosition(BitSet[] follow, SyntaxNode[] nodes) {
-  }
-
-  SyntaxNode _clone(int pos[]){
-    return new EpsilonNode();
-  }
-}
diff -Nru old\org\apache\oro\text\awk\LeafNode.java new\org\apache\oro\text\awk\LeafNode.java
--- old\org\apache\oro\text\awk\LeafNode.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\LeafNode.java	Thu Jan 01 01:00:00 1970
@@ -1,87 +0,0 @@
-/*
- * $Id: LeafNode.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.util.*;
-
-/**
- * @version @version@
- * @since 1.0
- */
-abstract class LeafNode extends SyntaxNode {
-  static final int _NUM_TOKENS                    = 256;
-  static final int _END_MARKER_TOKEN              = _NUM_TOKENS;
-
-  protected int _position;
-  protected BitSet _positionSet;
-
-  LeafNode(int position){
-    _position = position;
-    _positionSet = new BitSet(position + 1);
-    _positionSet.set(position);
-  }
-
-  abstract boolean _matches(char token);
-  final boolean _nullable()     { return false; }
-  final BitSet _firstPosition() { return _positionSet; }
-  final BitSet _lastPosition()  { return _positionSet; }
-  final void _followPosition(BitSet[] follow, SyntaxNode[] nodes) {
-    nodes[_position] = this;
-  }
-}
diff -Nru old\org\apache\oro\text\awk\NegativeCharacterClassNode.java new\org\apache\oro\text\awk\NegativeCharacterClassNode.java
--- old\org\apache\oro\text\awk\NegativeCharacterClassNode.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\NegativeCharacterClassNode.java	Thu Jan 01 01:00:00 1970
@@ -1,86 +0,0 @@
-/*
- * $Id: NegativeCharacterClassNode.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.util.*;
-
-/**
- * @version @version@
- * @since 1.0
- */
-final class NegativeCharacterClassNode extends CharacterClassNode {
-
-  NegativeCharacterClassNode(int position) {
-    super(position);
-
-    _characterSet.set(LeafNode._END_MARKER_TOKEN);
-  }
-
-  boolean _matches(char token) {
-    return (!_characterSet.get(token));
-  }
-
-  SyntaxNode _clone(int pos[]) {
-    NegativeCharacterClassNode node;
-
-    node               = new NegativeCharacterClassNode(pos[0]++);
-    node._characterSet = (BitSet)_characterSet.clone();
-    return node;
-  }
-}
diff -Nru old\org\apache\oro\text\awk\OrNode.java new\org\apache\oro\text\awk\OrNode.java
--- old\org\apache\oro\text\awk\OrNode.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\OrNode.java	Thu Jan 01 01:00:00 1970
@@ -1,111 +0,0 @@
-/*
- * $Id: OrNode.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.util.*;
-
-/**
- * @version @version@
- * @since 1.0
- */
-class OrNode extends SyntaxNode {
-  SyntaxNode _left, _right;
-
-  OrNode(SyntaxNode left, SyntaxNode right) {
-    _left  = left;
-    _right = right;
-  }
-
-  boolean _nullable() {
-    return (_left._nullable() || _right._nullable());
-  }
-
-  BitSet _firstPosition() {
-    BitSet ls, rs, bs;
-
-    ls = _left._firstPosition();
-    rs = _right._firstPosition();
-    bs = new BitSet(Math.max(ls.size(), rs.size()));
-    bs.or(rs);
-    bs.or(ls);
-
-    return bs;
-  }
-
-  BitSet _lastPosition()  {
-    BitSet ls, rs, bs;
-
-    ls = _left._lastPosition();
-    rs = _right._lastPosition();
-    bs = new BitSet(Math.max(ls.size(), rs.size()));
-    bs.or(rs);
-    bs.or(ls);
-
-    return bs;
-  }
-
-  void _followPosition(BitSet[] follow, SyntaxNode[] nodes) {
-    _left._followPosition(follow, nodes);
-    _right._followPosition(follow, nodes);
-  }
-
-  SyntaxNode _clone(int pos[]) {
-    return new OrNode(_left._clone(pos), _right._clone(pos));
-  }
-}
diff -Nru old\org\apache\oro\text\awk\package.html new\org\apache\oro\text\awk\package.html
--- old\org\apache\oro\text\awk\package.html	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\package.html	Thu Jan 01 01:00:00 1970
@@ -1,6 +0,0 @@
-<!-- $Id: package.html,v 1.1.1.1 2000/07/23 23:08:50 jon Exp $ -->
-<body>
-This package used to be the AwkTools library and provides AWK-like
-regular expression classes that implement the
-{@link org.apache.oro.text.regex} interfaces.
-</body>
diff -Nru old\org\apache\oro\text\awk\PlusNode.java new\org\apache\oro\text\awk\PlusNode.java
--- old\org\apache\oro\text\awk\PlusNode.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\PlusNode.java	Thu Jan 01 01:00:00 1970
@@ -1,77 +0,0 @@
-/*
- * $Id: PlusNode.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-
-/**
- * @version @version@
- * @since 1.o
- */
-final class PlusNode extends StarNode {
-
-  PlusNode(SyntaxNode child) {
-    super(child);
-  }
-
-  boolean _nullable() { return false; }
-
-  SyntaxNode _clone(int pos[]) {
-    return new PlusNode(_left._clone(pos));
-  }
-}
diff -Nru old\org\apache\oro\text\awk\QuestionNode.java new\org\apache\oro\text\awk\QuestionNode.java
--- old\org\apache\oro\text\awk\QuestionNode.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\QuestionNode.java	Thu Jan 01 01:00:00 1970
@@ -1,78 +0,0 @@
-/*
- * $Id: QuestionNode.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-
-/**
- * @version @version@
- * @since 1.0
- */
-final class QuestionNode extends OrNode {
-  final static SyntaxNode _epsilon = new EpsilonNode();
-
-  QuestionNode(SyntaxNode child){
-    super(child, _epsilon);
-  }
-
-  boolean _nullable() { return true; }
-
-  SyntaxNode _clone(int pos[]) {
-    return new QuestionNode(_left._clone(pos));
-  }
-}
diff -Nru old\org\apache\oro\text\awk\StarNode.java new\org\apache\oro\text\awk\StarNode.java
--- old\org\apache\oro\text\awk\StarNode.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\StarNode.java	Thu Jan 01 01:00:00 1970
@@ -1,98 +0,0 @@
-/*
- * $Id: StarNode.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.util.*;
-
-/**
- * @version @version@
- * @since 1.0
- */
-class StarNode extends SyntaxNode {
-  SyntaxNode _left;
-
-  StarNode(SyntaxNode child){
-    _left = child;
-  }
-
-  boolean _nullable()     { return true; }
-
-  BitSet _firstPosition() { return _left._firstPosition(); }
-
-  BitSet _lastPosition()  { return _left._lastPosition(); }
-
-  void _followPosition(BitSet[] follow, SyntaxNode[] nodes) {
-    BitSet last, first;
-    int size;
-
-    _left._followPosition(follow, nodes);
-
-    last  = _lastPosition();
-    first = _firstPosition();
-    size  = last.size();
-
-    while(0 < size--)
-      if(last.get(size))
-	follow[size].or(first);
-  }
-
-  SyntaxNode _clone(int pos[]) {
-    return new StarNode(_left._clone(pos));
-  }
-}
diff -Nru old\org\apache\oro\text\awk\SyntaxNode.java new\org\apache\oro\text\awk\SyntaxNode.java
--- old\org\apache\oro\text\awk\SyntaxNode.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\SyntaxNode.java	Thu Jan 01 01:00:00 1970
@@ -1,82 +0,0 @@
-/*
- * $Id: SyntaxNode.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.util.*;
-
-/**
- * @version @version@
- * @since 1.0
- */
-abstract class SyntaxNode {
-  abstract boolean _nullable(); 
-  abstract BitSet  _firstPosition();
-  abstract BitSet  _lastPosition();
-  abstract void    _followPosition(BitSet[] follow, SyntaxNode[] nodes);
-
-  /**
-   * This method is designed specifically to accommodate the expansion of
-   * an interval into its subparts.
-   * <p>
-   * @param pos  A single element array containing a variable representing
-   *             the current position.  It is made an array to cause it
-   *             to be passed by reference to allow incrementing.
-   */ 
-  abstract SyntaxNode _clone(int pos[]);
-}
diff -Nru old\org\apache\oro\text\awk\SyntaxTree.java new\org\apache\oro\text\awk\SyntaxTree.java
--- old\org\apache\oro\text\awk\SyntaxTree.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\SyntaxTree.java	Thu Jan 01 01:00:00 1970
@@ -1,122 +0,0 @@
-/*
- * $Id: SyntaxTree.java,v 1.8 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-import java.util.*;
-
-/*
- * IMPORTANT!!!!!!!!!!!!!
- * Don't forget to optimize this module.  The calculation of follow can
- * be accelerated by calculating first and last only once for each node and
- * saving instead of doing dynamic calculation every time.
- */
-
-/**
- * @version @version@
- * @since 1.0
- */
-final class SyntaxTree {
-  int _positions;
-  SyntaxNode _root;
-  LeafNode[] _nodes;
-  BitSet[] _followSet;
-  
-  SyntaxTree(SyntaxNode root, int positions) {
-    _root      = root;
-    _positions = positions;
-  }
-
-  void _computeFollowPositions() {
-    int index;
-
-    _followSet = new BitSet[_positions];
-    _nodes     = new LeafNode[_positions];
-    index =    _positions;
-
-    while(0 < index--)
-      _followSet[index] = new BitSet(_positions);
-
-    _root._followPosition(_followSet, _nodes);
-  }
-
-  private void __addToFastMap(BitSet pos, boolean[] fastMap, boolean[] done){
-    int token, node;
-
-    for(node = 0; node < _positions; node++){
-      if(pos.get(node) && !done[node]){
-	done[node] = true;
-
-	for(token=0; token < LeafNode._NUM_TOKENS; token++){
-	  if(!fastMap[token])
-	    fastMap[token] = _nodes[node]._matches((char)token);
-	}
-      }
-    }
-  }
-
-  boolean[] createFastMap(){
-    boolean[] fastMap, done;
-
-    fastMap  = new boolean[LeafNode._NUM_TOKENS]; 
-    done     = new boolean[_positions];
-    __addToFastMap(_root._firstPosition(), fastMap, done);
-
-    return fastMap;
-  }
-}
diff -Nru old\org\apache\oro\text\awk\TokenNode.java new\org\apache\oro\text\awk\TokenNode.java
--- old\org\apache\oro\text\awk\TokenNode.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\awk\TokenNode.java	Thu Jan 01 01:00:00 1970
@@ -1,79 +0,0 @@
-/*
- * $Id: TokenNode.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.awk;
-
-
-/**
- * @version @version@
- * @since 1.0
- */
-class TokenNode extends LeafNode {
-  char _token;
-
-  TokenNode(char token, int position)  {
-    super(position);
-    _token = token;
-  }
-
-  boolean _matches(char token) { return (_token == token); }
-
-  SyntaxNode _clone(int pos[]) {
-    return new TokenNode(_token, pos[0]++);
-  }
-}
diff -Nru old\org\apache\oro\text\DefaultMatchAction.java new\org\apache\oro\text\DefaultMatchAction.java
--- old\org\apache\oro\text\DefaultMatchAction.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\DefaultMatchAction.java	Thu Jan 01 01:00:00 1970
@@ -1,74 +0,0 @@
-/*
- * $Id: DefaultMatchAction.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text;
-
- 
-/**
- * DefaultMatchAction is a support class for MatchActionProcessor,
- * providing a default match action.
- *
- * @version @version@
- * @since 1.0
- * @see MatchActionProcessor
- */
-final class DefaultMatchAction implements MatchAction {
-  public void processMatch(MatchActionInfo matchInfo) {
-    matchInfo.output.println(matchInfo.line);
-  }
-}
diff -Nru old\org\apache\oro\text\GlobCompiler.java new\org\apache\oro\text\GlobCompiler.java
--- old\org\apache\oro\text\GlobCompiler.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\GlobCompiler.java	Thu Jan 01 01:00:00 1970
@@ -1,367 +0,0 @@
-/*
- * $Id: GlobCompiler.java,v 1.8 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text;
-
-import org.apache.oro.text.regex.*;
-
-/**
- * The GlobCompiler class will compile a glob expression into a Perl5Pattern
- * that may be used to match patterns in conjunction with Perl5Matcher.
- * Rather than create extra GlobMatcher and GlobPattern classes tailored
- * to the task of matching glob expressions, we have simply reused the
- * Perl5 regular expression classes from org.apache.oro.text.regex by
- * making GlobCompiler translate a glob expression into a Perl5 expression
- * that is compiled by a Perl5Compiler instance internal to the GlobCompiler.
- * <p>
- * Because there are various similar glob expression syntaxes, GlobCompiler
- * tries to provide a small amount of customization by providing the
- * {@link #STAR_CANNOT_MATCH_NULL_MASK}
- * and  {@link #QUESTION_MATCHES_ZERO_OR_ONE_MASK} compilation options.
- * <p>
- * The GlobCompiler expression syntax is based on Unix shell glob expressions
- * but should be usable to simulate Win32 wildcards.  The following syntax
- * is supported:
- * <ul>
- * <li> <b>*</b> - Matches zero or more instances of any character.  If the
- *          STAR_CANNOT_MATCH_NULL_MASK option is used, <b>*</b> matches
- *          one or more instances of any character.
- * <li> <b>?</b> - Matches one instance of any character. If the
- *          QUESTION_MATCHES_ZERO_OR_ONE_MASK option is used, <b>?</b>
- *          matches zero or one instances of any character.
- * <li> <b>[...]</b> - Matches any of characters enclosed by the brackets.
- *          <b> * </b> and <b>?</b> lose their special meanings within a
- *          character class.  Additionaly if the first character following
- *          the opening bracket is a <b>!</b> or a <b>^</b>, then any
- *          character not in the character class is matched.  A <b>-</b>
- *          between two characters can be used to denote a range.  A
- *          <b>-</b> at the beginning or end of the character class matches
- *          itself rather than referring to a range.  A <b>]</b> immediately
- *          following the opening <b>[</b> matches itself rather than
- *          indicating the end of the character class, otherwise it must be
- *          escaped with a backslash to refer to itself.
- * <li> <b>\</b> - A backslash matches itself in most situations.  But
- *          when a special character such as a <b>*</b> follows it, a
- *          backslash <em> escapes </em> the character, indicating that
- *          the special chracter should be interpreted as a normal character
- *          instead of its special meaning.
- * <li> All other characters match themselves.
- * </ul>
- * <p>
- * Please remember that the when you construct a Java string in Java code,
- * the backslash character is itself a special Java character, and it must
- * be double backslashed to represent single backslash in a regular
- * expression.
- *
- * @version @version@
- * @since 1.0
- * @see org.apache.oro.text.regex.PatternCompiler
- * @see org.apache.oro.text.regex.Perl5Matcher
- */
-public final class GlobCompiler implements PatternCompiler {
-  /**
-   * The default mask for the {@link #compile compile} methods.
-   * It is equal to 0.  The default behavior is for a glob expression to
-   * be case sensitive unless it is compiled with the CASE_INSENSITIVE_MASK
-   * option.
-   */
-  public static final int DEFAULT_MASK = 0;
-
-  /**
-   * A mask passed as an option to the {@link #compile compile} methods
-   * to indicate a compiled glob expression should be case insensitive.
-   */ 
-  public static final int CASE_INSENSITIVE_MASK             = 0x0001;
-
-  /**
-   * A mask passed as an option to the {@link #compile compile} methods
-   * to indicate that a * should not be allowed to match the null string.
-   * The normal behavior of the * metacharacter is that it may match any
-   * 0 or more characters.  This mask causes it to match 1 or more 
-   * characters of anything.
-   */ 
-  public static final int STAR_CANNOT_MATCH_NULL_MASK       = 0x0002;
-
-  /**
-   * A mask passed as an option to the {@link #compile compile} methods
-   * to indicate that a ? should not be allowed to match the null string.
-   * The normal behavior of the ? metacharacter is that it may match any 1
-   * character.  This mask causes it to match 0 or 1 characters.
-   */ 
-  public static final int QUESTION_MATCHES_ZERO_OR_ONE_MASK = 0x0004;
-
-  /**
-   * A mask passed as an option to the {@link #compile compile} methods
-   * to indicate that the resulting Perl5Pattern should be treated as a
-   * read only data structure by Perl5Matcher, making it safe to share
-   * a single Perl5Pattern instance among multiple threads without needing
-   * synchronization.  Without this option, Perl5Matcher reserves the right
-   * to store heuristic or other information in Perl5Pattern that might
-   * accelerate future matches.  When you use this option, Perl5Matcher will
-   * not store or modify any information in a Perl5Pattern.  Use this option
-   * when you want to share a Perl5Pattern instance among multiple threads
-   * using different Perl5Matcher instances.
-   */
-  public static final int READ_ONLY_MASK        = 0x0008;
-
-  private Perl5Compiler __perl5Compiler;
-
-  private static boolean __isPerl5MetaCharacter(char ch) {
-    return (ch == '*' || ch == '?' || ch == '+' || ch == '[' || ch == ']' || 
-	    ch == '(' || ch == ')' || ch == '|' || ch == '^' || ch == '$' ||
-	    ch == '.' || ch == '{' || ch == '}' || ch == '\\');
-  }
-
-  private static boolean __isGlobMetaCharacter(char ch) {
-    return (ch == '*' || ch == '?' || ch == '[' || ch == ']');
-  }
-
-  /**
-   * This static method is the basic engine of the Glob PatternCompiler
-   * implementation.  It takes a glob expression in the form of a character
-   * array and converts it into a String representation of a Perl5 pattern.
-   * The method is made public so that programmers may use it for their
-   * own purposes.  However, the GlobCompiler compile methods work by
-   * converting the glob pattern to a Perl5 pattern using this method, and
-   * then invoking the compile() method of an internally stored Perl5Compiler
-   * instance.
-   * <p>
-   * @param pattern  A character array representation of a Glob pattern.
-   * @return A String representation of a Perl5 pattern equivalent to the
-   *         Glob pattern.
-   */
-  public static String globToPerl5(char[] pattern, int options) {
-    boolean inCharSet, starCannotMatchNull = false, questionMatchesZero;
-    int ch;
-    StringBuffer buffer;
-
-    buffer = new StringBuffer(2*pattern.length);
-    inCharSet = false;
-
-    questionMatchesZero = ((options & QUESTION_MATCHES_ZERO_OR_ONE_MASK) != 0);
-    starCannotMatchNull = ((options & STAR_CANNOT_MATCH_NULL_MASK) != 0);
-
-    for(ch=0; ch < pattern.length; ch++) {
-      switch(pattern[ch]) {
-      case '*':
-	if(inCharSet)
-	  buffer.append('*');
-	else {
-	  if(starCannotMatchNull)
-	      buffer.append(".+");
-	  else
-	    buffer.append(".*");
-	}
-	break;
-      case '?':
-	if(inCharSet)
-	  buffer.append('?');
-	else {
-	  if(questionMatchesZero)
-	    buffer.append(".?");
-	  else
-	    buffer.append('.');
-	}
-	break;
-      case '[':
-	inCharSet = true;
-	buffer.append(pattern[ch]);
-
-	if(ch + 1 < pattern.length) {
-	  switch(pattern[ch + 1]) {
-	  case '!':
-	  case '^':
-	    buffer.append('^');
-	    ++ch;
-	    continue;
-	  case ']':
-	    buffer.append(']');
-	    ++ch;
-	    continue;
-	  }
-	}
-	break;
-      case ']':
-	inCharSet = false;
-	buffer.append(pattern[ch]);
-	break;
-      case '\\':
-	buffer.append('\\');
-	if(ch == pattern.length - 1) {
-	  buffer.append('\\');
-	} else if(__isGlobMetaCharacter(pattern[ch + 1]))
-	  buffer.append(pattern[++ch]);
-	else
-	  buffer.append('\\');
-	break;
-      default:
-	if(!inCharSet && __isPerl5MetaCharacter(pattern[ch]))
-	  buffer.append('\\');
-	buffer.append(pattern[ch]);
-	break;
-      }
-    }
-
-    return buffer.toString();
-  }
-
-
-  /**
-   * The default GlobCompiler constructor.  It initializes an internal
-   * Perl5Compiler instance to compile translated glob expressions.
-   */
-  public GlobCompiler() {
-    __perl5Compiler = new Perl5Compiler();
-  }
-
-
-  /**
-   * Compiles a Glob expression into a Perl5Pattern instance that
-   * can be used by a Perl5Matcher object to perform pattern matching.
-   * <p>
-   * @param pattern  A Glob expression to compile.
-   * @param options  A set of flags giving the compiler instructions on
-   *                 how to treat the glob expression.  The flags
-   *                 are a logical OR of any number of the 3 <b>MASK</b>
-   *                 constants.  For example:
-   *                 <pre>
-   * regex =
-   *   compiler.compile(pattern, GlobCompiler.
-   *                    CASE_INSENSITIVE_MASK |
-   *                    GlobCompiler.STAR_CANNOT_MATCH_NULL_MASK);
-   *                 </pre>
-   *                  This says to compile the pattern so that *
-   *                  cannot match the null string and to perform
-   *                  matches in a case insensitive manner.
-   * @return A Pattern instance constituting the compiled expression.
-   *         This instance will always be a Perl5Pattern and can be reliably
-   *         casted to a Perl5Pattern.
-   * @exception MalformedPatternException  If the compiled expression
-   *  is not a valid Glob expression.
-   */
-  public Pattern compile(char[] pattern, int options)
-       throws MalformedPatternException
-  {
-    int perlOptions = 0;
-    if((options & CASE_INSENSITIVE_MASK) != 0)
-      perlOptions |= Perl5Compiler.CASE_INSENSITIVE_MASK;
-    if((options & READ_ONLY_MASK) != 0)
-      perlOptions |= Perl5Compiler.READ_ONLY_MASK;
-    return __perl5Compiler.compile(globToPerl5(pattern, options), perlOptions);
-  }
-
-  /**
-   * Same as calling <b>compile(pattern, GlobCompiler.DEFAULT_MASK);</b>
-   * <p>
-   * @param pattern  A regular expression to compile.
-   * @return A Pattern instance constituting the compiled regular expression.
-   *         This instance will always be a Perl5Pattern and can be reliably
-   *         casted to a Perl5Pattern.
-   * @exception MalformedPatternException  If the compiled expression
-   *  is not a valid Glob expression.
-   */
-  public Pattern compile(char[] pattern) throws MalformedPatternException {
-    return compile(pattern, DEFAULT_MASK);
-  }
-
-  /**
-   * Same as calling <b>compile(pattern, GlobCompiler.DEFAULT_MASK);</b>
-   * <p>
-   * @param pattern  A regular expression to compile.
-   * @return A Pattern instance constituting the compiled regular expression.
-   *         This instance will always be a Perl5Pattern and can be reliably
-   *         casted to a Perl5Pattern.
-   * @exception MalformedPatternException  If the compiled expression
-   *  is not a valid Glob expression.
-   */
-  public Pattern compile(String pattern) throws MalformedPatternException {
-    return compile(pattern.toCharArray(), DEFAULT_MASK);
-  }
-
-  /**
-   * Compiles a Glob expression into a Perl5Pattern instance that
-   * can be used by a Perl5Matcher object to perform pattern matching.
-   * <p>
-   * @param pattern  A Glob expression to compile.
-   * @param options  A set of flags giving the compiler instructions on
-   *                 how to treat the glob expression.  The flags
-   *                 are a logical OR of any number of the 3 <b>MASK</b>
-   *                 constants.  For example:
-   *                 <pre>
-   * regex =
-   *   compiler.compile("*.*", GlobCompiler.
-   *                    CASE_INSENSITIVE_MASK |
-   *                    GlobCompiler.STAR_CANNOT_MATCH_NULL_MASK);
-   *                 </pre>
-   *                  This says to compile the pattern so that *
-   *                  cannot match the null string and to perform
-   *                  matches in a case insensitive manner.
-   * @return A Pattern instance constituting the compiled expression.
-   *         This instance will always be a Perl5Pattern and can be reliably
-   *         casted to a Perl5Pattern.
-   * @exception MalformedPatternException  If the compiled expression
-   *  is not a valid Glob expression.
-   */
-  public Pattern compile(String pattern, int options)
-       throws MalformedPatternException
-  {
-    return compile(pattern.toCharArray(), options);
-  }
-
-}
-
diff -Nru old\org\apache\oro\text\MalformedCachePatternException.java new\org\apache\oro\text\MalformedCachePatternException.java
--- old\org\apache\oro\text\MalformedCachePatternException.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\MalformedCachePatternException.java	Tue Nov 10 18:49:04 2009
@@ -80,6 +80,9 @@
  * @see PatternCache
  */
 public class MalformedCachePatternException extends RuntimeException {
+
+	private static final long serialVersionUID = 5675741685172097762L;
+
   /**
    * Simply calls the corresponding constructor of its superclass.
    */
diff -Nru old\org\apache\oro\text\MatchAction.java new\org\apache\oro\text\MatchAction.java
--- old\org\apache\oro\text\MatchAction.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\MatchAction.java	Thu Jan 01 01:00:00 1970
@@ -1,86 +0,0 @@
-/*
- * $Id: MatchAction.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text;
-
-
-/**
- * The MatchAction interface provides the callback interface for actions
- * bound to patterns in
- * {@link MatchActionProcessor}.  More often than not, you will want to
- * create MatchAction instances as anonymous classes when adding pattern
- * action pairs to a MatchActionProcessor instance.
- *
- * @version @version@
- * @since 1.0
- * @see MatchActionProcessor
- * @see MatchActionInfo
- */
-public interface MatchAction {
-  /**
-   * This method is called by MatchActionProcessor when it finds an associated
-   * pattern in a line of input.  Information pertaining to the matched
-   * line is included in the MatchActionInfo parameter.
-   * <p>
-   * @see MatchActionProcessor
-   * @see MatchActionInfo
-   * @param matchInfo  The match information associated with the line
-   *                   matched by MatchActionProcessor.
-   */
-  public void processMatch(MatchActionInfo matchInfo);
-}
diff -Nru old\org\apache\oro\text\MatchActionInfo.java new\org\apache\oro\text\MatchActionInfo.java
--- old\org\apache\oro\text\MatchActionInfo.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\MatchActionInfo.java	Thu Jan 01 01:00:00 1970
@@ -1,131 +0,0 @@
-/*
- * $Id: MatchActionInfo.java,v 1.8 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text;
- 
-import java.util.*;
-import java.io.*;
-
-import org.apache.oro.text.regex.*;
-
-/**
- * This class is used to provide information regarding a match found by
- * MatchActionProcessor to a MatchAction callback implementation.
- *
- * @version @version@
- * @since 1.0
- * @see MatchAction
- * @see MatchActionProcessor
- */
-public final class MatchActionInfo {
-  /** The line number of the matching line */
-  public int lineNumber;
-
-  /** 
-   * The String representation of the matching line with the trailing
-   * newline truncated.
-   */
-  public String line;
-
-  /** 
-   * The char[] representation of the matching line with the trailing
-   * newline truncated.
-   */
-  public char[] charLine;
-
-  /**
-   * The field separator used by the MatchActionProcessor.  This will be
-   * set to null by a MatchActionProcessor instance if no field separator
-   * was specified before match processing began.
-   */
-  public Pattern fieldSeparator;
-
-  /**
-   * A List of Strings containing the fields of the line that were
-   * separated out by the fieldSeparator.  If no field separator was
-   * specified, this variable will be set to null.
-   */
-  public List fields;
-
-  /** The PatternMatcher used to find the match. */
-  public PatternMatcher matcher;
-
-  /**
-   * The pattern found in the line of input.  If a MatchAction callback
-   * is registered with a null pattern (meaning the callback should be
-   * applied to every line of input), this value will be null.
-   */
-  public Pattern pattern;
-
-  /** 
-   * The first match found in the line of input.    If a MatchAction callback
-   * is registered with a null pattern (meaning the callback should be
-   * applied to every line of input), this value will be null.
-   */
-  public MatchResult match;
-
-  /** The output stream passed to the MatchActionProcessor.  */
-  public PrintWriter output;
-
-  /**
-   * The input stream passed to the MatchActionProcessor from which the
-   * matching line was read.
-   */
-  public BufferedReader input;
-}
-
diff -Nru old\org\apache\oro\text\MatchActionProcessor.java new\org\apache\oro\text\MatchActionProcessor.java
--- old\org\apache\oro\text\MatchActionProcessor.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\MatchActionProcessor.java	Thu Jan 01 01:00:00 1970
@@ -1,432 +0,0 @@
-/*
- * $Id: MatchActionProcessor.java,v 1.10 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text;
- 
-import java.io.*;
-import java.util.*;
-
-import org.apache.oro.text.regex.*;
-
-/**
- * The MatchActionProcessor class provides AWK-like line by line filtering
- * of a text stream, pattern action pair association, and field splitting
- * based on a registered separator.  However, the class can be used with
- * any compatible PatternMatcher/PatternCompiler implementations and
- * need not use the AWK matching classes in org.apache.oro.text.awk.  In fact,
- * the default matcher and compiler used by the class are Perl5Matcher and
- * Perl5Compiler from org.apache.oro.text.regex.
- * <p>
- * To completely understand how to use MatchActionProcessor, you should first
- * look at {@link MatchAction} and {@link MatchActionInfo}.
- * A MatchActionProcessor is first initialized with
- * the desired PatternCompiler and PatternMatcher instances to use to compile
- * patterns and perform matches.  Then, optionally, a field separator may
- * be registered with {@link #setFieldSeparator setFieldSeparator()}
- * Finally, as many pattern action pairs as desired are registerd with
- * {@link #addAction addAction()} before processing the input
- * with {@link #processMatches processMatches()}.  Pattern action
- * pairs are processed in the order they were registered.
- * <p>
- * The look of added actions can closely mirror that of AWK when anonymous
- * classes are used.  Here's an example of how you might use
- * MatchActionProcessor to extract only the second column of a semicolon
- * delimited file:
- * <p>
- * <pre>
- * import java.io.*;
- *
- * import org.apache.oro.text.*;
- * import org.apache.oro.text.regex.*;
- *
- * public final class semicolon {
- *
- *  public static final void main(String[] args) {
- *    MatchActionProcessor processor = new MatchActionProcessor();
- *
- *    try {
- *      processor.setFieldSeparator(";");
- *      // Using a null pattern means to perform the action for every line.
- *      processor.addAction(null, new MatchAction() {
- *        public void processMatch(MatchActionInfo info) {
- *	    // We assume the second column exists
- *          info.output.println(info.fields.elementAt(1));
- *        }
- *     });
- *   } catch(MalformedPatternException e) {
- *     e.printStackTrace();
- *     System.exit(1);
- *   }
- *
- *   try {
- *      processor.processMatches(System.in, System.out);
- *   } catch(IOException e) {
- *     e.printStackTrace();
- *     System.exit(1);
- *   }
- *  }
- *}
- * </pre>
- * You can redirect the following sample input to stdin to test the code:
- * <pre>
- * 1;Trenton;New Jersey
- * 2;Annapolis;Maryland
- * 3;Austin;Texas
- * 4;Richmond;Virginia
- * 5;Harrisburg;Pennsylvania
- * 6;Honolulu;Hawaii
- * 7;Santa Fe;New Mexico
- * </pre>
- *
- * @version @version@
- * @since 1.0
- * @see MatchAction
- * @see MatchActionInfo
- */
-public final class MatchActionProcessor {
-  private Pattern __fieldSeparator = null;
-  private PatternCompiler __compiler;
-  private PatternMatcher  __matcher;
-  // If a pattern is null, it means to do it for every line.
-  private Vector __patterns   = new Vector();
-  private Vector __actions    = new Vector();
-
-  private MatchAction __defaultAction = new DefaultMatchAction();
-
-  /**
-   * Creates a new MatchActionProcessor instance initialized with the specified
-   * pattern compiler and matcher.  The field separator is set to null by
-   * default, which means that matched lines will not be split into separate
-   * fields unless the field separator is set with
-   * {@link #setFieldSeparator setFieldSeparator()}.
-   * <p>
-   * @param compiler  The PatternCompiler to use to compile registered
-   *                  patterns.
-   * @param matcher   The PatternMatcher to use when searching for matches.
-   */
-  public MatchActionProcessor(PatternCompiler compiler, PatternMatcher matcher)
-  {
-    __compiler = compiler;
-    __matcher  = matcher;
-  }
-
-  /**
-   * Default constructor for MatchActionProcessor.  Same as calling
-   * <blockquote><code>
-   * MatchActionProcessor(new Perl5Compiler(), new Perl5Matcher());
-   * </code></blockquote>
-   */
-  public MatchActionProcessor() {
-    this(new Perl5Compiler(), new Perl5Matcher());
-  }
-
-
-  /**
-   * Registers a pattern action pair, providing options to be used to
-   * compile the pattern.  If a pattern is null, the action
-   * is performed for every line of input.
-   * <p>
-   * @param pattern  The pattern to bind to an action.
-   * @param options  The compilation options to use for the pattern.
-   * @param action   The action to associate with the pattern.
-   * @exception MalformedPatternException If the pattern cannot be compiled.
-   */
-  public void addAction(String pattern, int options, MatchAction action)
-       throws MalformedPatternException
-  {
-    if(pattern != null)
-      __patterns.addElement(__compiler.compile(pattern, options));
-    else
-      __patterns.addElement(null);
-    __actions.addElement(action);
-  }
-
-  /**
-   * Binds a patten to the default action, providing options to be
-   * used to compile the pattern.  The default action is to simply print
-   * the matched line to the output.  If a pattern is null, the action
-   * is performed for every line of input.
-   * <p>
-   * @param pattern  The pattern to bind to an action.
-   * @param options  The compilation options to use for the pattern.
-   * @exception MalformedPatternException If the pattern cannot be compiled.
-   */
-  public void addAction(String pattern, int options)
-       throws MalformedPatternException
-  {
-    addAction(pattern, options, __defaultAction);
-  }
-
-  /**
-   * Binds a patten to the default action.  The default action is to simply
-   * print the matched line to the output.  If a pattern is null, the action
-   * is performed for every line of input.
-   * <p>
-   * @param pattern  The pattern to bind to an action.
-   * @exception MalformedPatternException If the pattern cannot be compiled.
-   */
-  public void addAction(String pattern) throws MalformedPatternException {
-    addAction(pattern, 0);
-  }
-
-
-  /**
-   * Registers a pattern action pair.  If a pattern is null, the action
-   * is performed for every line of input.
-   * <p>
-   * @param pattern  The pattern to bind to an action.
-   * @param action   The action to associate with the pattern.
-   * @exception MalformedPatternException If the pattern cannot be compiled.
-   */
-  public void addAction(String pattern, MatchAction action)
-       throws MalformedPatternException
-  {
-    addAction(pattern, 0, action);
-  }
-
-  /**
-   * Sets the field separator to use when splitting a line into fields.
-   * If the field separator is never set, or set to null, matched input
-   * lines are not split into fields.
-   * <p>
-   * @param separator  A regular expression defining the field separator.
-   * @param options    The options to use when compiling the separator.
-   * @exception MalformedPatternException If the separator cannot be compiled.
-   */
-  public void setFieldSeparator(String separator, int options)
-       throws MalformedPatternException
-  { 
-    if(separator == null) {
-      __fieldSeparator = null;
-      return;
-    }
-    __fieldSeparator = __compiler.compile(separator, options);
-  }
-
-
-  /**
-   * Sets the field separator to use when splitting a line into fields.
-   * If the field separator is never set, or set to null, matched input
-   * lines are not split into fields.
-   * <p>
-   * @param separator  A regular expression defining the field separator.
-   * @exception MalformedPatternException If the separator cannot be compiled.
-   */
-  public void setFieldSeparator(String separator)
-       throws MalformedPatternException
-  {
-    setFieldSeparator(separator, 0);
-  }
-
-
-  /**
-   * This method reads the provided input one line at a time and for
-   * every registered pattern that is contained in the line it executes
-   * the associated MatchAction's processMatch() method.  If a field
-   * separator has been defined with
-   * {@link #setFieldSeparator setFieldSeparator()}, the
-   * fields member of the MatchActionInfo instance passed to the
-   * processMatch() method is set to a Vector of Strings containing
-   * the split fields of the line.  Otherwise the fields member is set
-   * to null.  If no match was performed to invoke the action (i.e.,
-   * a null pattern was registered), then the match member is set
-   * to null.  Otherwise, the match member will contain the result of
-   * the match.
-   * <p>
-   * The input stream, having been exhausted, is closed right before the
-   * method terminates and the output stream is flushed.
-   * <p>
-   * @see MatchActionInfo
-   * @param input  The input stream from which to read lines.
-   * @param output Where to send output.
-   * @param encoding The character encoding of the InputStream source.
-   *           If you also want to define an output character encoding,
-   *           you should use {@link #processMatches(Reader, Writer)}
-   *           and specify the encodings when creating the Reader and
-   *           Writer sources and sinks.
-   * @exception IOException  If an error occurs while reading input
-   *            or writing output.
-   */
-  public void processMatches(InputStream input, OutputStream output,
-			     String encoding)
-    throws IOException
-  {
-    processMatches(new InputStreamReader(input, encoding),
-		   new OutputStreamWriter(output));
-  }
-
-
-  /**
-   * This method reads the provided input one line at a time using the
-   * platform standart character encoding and for every registered
-   * pattern that is contained in the line it executes the associated
-   * MatchAction's processMatch() method.  If a field separator has been
-   * defined with {@link #setFieldSeparator setFieldSeparator()}, the
-   * fields member of the MatchActionInfo instance passed to the
-   * processMatch() method is set to a Vector of Strings containing
-   * the split fields of the line.  Otherwise the fields member is set
-   * to null.  If no match was performed to invoke the action (i.e.,
-   * a null pattern was registered), then the match member is set
-   * to null.  Otherwise, the match member will contain the result of
-   * the match.
-   *
-   * <p>
-   * The input stream, having been exhausted, is closed right before the
-   * method terminates and the output stream is flushed.
-   * <p>
-   *
-   * @see MatchActionInfo
-   * @param input  The input stream from which to read lines.
-   * @param output Where to send output.
-   * @exception IOException  If an error occurs while reading input
-   *            or writing output.
-   */
-  public void processMatches(InputStream input, OutputStream output)
-    throws IOException
-  {
-    processMatches(new InputStreamReader(input),
-		   new OutputStreamWriter(output));
-  }
-
-  /**
-   * This method reads the provided input one line at a time and for
-   * every registered pattern that is contained in the line it executes
-   * the associated MatchAction's processMatch() method.  If a field
-   * separator has been defined with
-   * {@link #setFieldSeparator setFieldSeparator()}, the
-   * fields member of the MatchActionInfo instance passed to the
-   * processMatch() method is set to a Vector of Strings containing
-   * the split fields of the line.  Otherwise the fields member is set
-   * to null.  If no match was performed to invoke the action (i.e.,
-   * a null pattern was registered), then the match member is set
-   * to null.  Otherwise, the match member will contain the result of
-   * the match.
-   * <p>
-   * The input stream, having been exhausted, is closed right before the
-   * method terminates and the output stream is flushed.
-   * <p>
-   * @see MatchActionInfo
-   * @param input  The input stream from which to read lines.
-   * @param output Where to send output.
-   * @exception IOException  If an error occurs while reading input
-   *            or writing output.
-   */
-  public void processMatches(Reader input, Writer output)
-    throws IOException
-  {
-    int patternCount, current;
-    LineNumberReader reader = new LineNumberReader(input);
-    PrintWriter writer    = new PrintWriter(output);
-    MatchActionInfo info  = new MatchActionInfo();
-    Object obj;
-    Pattern pattern;
-    MatchAction action;
-    List fields = new ArrayList();
-
-    // Set those things that will not change.
-    info.matcher        = __matcher;
-    info.fieldSeparator = __fieldSeparator;
-    info.input          = reader;
-    info.output         = writer;
-    info.fields         = null;
-    patternCount        = __patterns.size();
-
-    info.lineNumber     = 0;
-
-    while((info.line = reader.readLine()) != null) {
-      info.charLine = info.line.toCharArray();
-      for(current=0; current < patternCount; current++) {
-	obj     = __patterns.elementAt(current);
-	// If a pattern is null, it means to do it for every line.
-	if(obj != null) {
-	  pattern = (Pattern)__patterns.elementAt(current);
-	  if(__matcher.contains(info.charLine, pattern)) {
-	    info.match = __matcher.getMatch();
-	    info.lineNumber = reader.getLineNumber();
-	    info.pattern    = pattern;
-	    if(__fieldSeparator != null) {
-	      fields.clear();
-	      Util.split(fields, __matcher, __fieldSeparator, info.line);
-	      info.fields = fields;
-	    } else
-	      info.fields = null;
-	    action = (MatchAction)__actions.elementAt(current);
-	    action.processMatch(info);
-	  }
-	} else {
-	  info.match      = null;
-	  info.lineNumber = reader.getLineNumber();
-	  if(__fieldSeparator != null) {
-	    fields.clear();
-	    Util.split(fields, __matcher, __fieldSeparator, info.line);
-	    info.fields = fields;
-	  } else
-	    info.fields = null;
-	  action = (MatchAction)__actions.elementAt(current);
-	  action.processMatch(info);
-	}
-      }
-    }
-
-    // Flush output but don't close, close input since we reached end.
-    writer.flush();
-    reader.close();
-  }
-
-
-}
diff -Nru old\org\apache\oro\text\package.html new\org\apache\oro\text\package.html
--- old\org\apache\oro\text\package.html	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\package.html	Thu Jan 01 01:00:00 1970
@@ -1,6 +0,0 @@
-<!-- $Id: package.html,v 1.1.1.1 2000/07/23 23:08:49 jon Exp $ -->
-<body>
-This package used to be the TextTools library and provides general
-text processing support, including a glob regular expression class,
-pattern caching and line-by-line processing classes.
-</body>
diff -Nru old\org\apache\oro\text\PatternCacheFIFO.java new\org\apache\oro\text\PatternCacheFIFO.java
--- old\org\apache\oro\text\PatternCacheFIFO.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\PatternCacheFIFO.java	Thu Jan 01 01:00:00 1970
@@ -1,122 +0,0 @@
-/*
- * $Id: PatternCacheFIFO.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text;
-
-import java.util.*;
-
-import org.apache.oro.text.regex.*;
-import org.apache.oro.util.*;
-
-/**
- * This class is a GenericPatternCache subclass implementing a FIFO (First
- * In First Out) cache replacement policy.  In other words, patterns are
- * added to the cache until the cache becomes full.  Once the cache is full,
- * if a new pattern is added to the cache, it replaces the first of
- * the current patterns in the cache to have been added.
- *
- * @version @version@
- * @since 1.0
- * @see GenericPatternCache
- */
-public final class PatternCacheFIFO extends GenericPatternCache {
-
-  /**
-   * Creates a PatternCacheFIFO instance with a given cache capacity,
-   * initialized to use a given PatternCompiler instance as a pattern compiler.
-   * <p>
-   * @param capacity  The capacity of the cache.
-   * @param compiler  The PatternCompiler to use to compile patterns.
-   */
-  public PatternCacheFIFO(int capacity, PatternCompiler compiler) {
-    super(new CacheFIFO(capacity), compiler);
-  }
-
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * PatternCacheFIFO(GenericPatternCache.DEFAULT_CAPACITY, compiler);
-   * </pre></blockquote>
-   */
-  public PatternCacheFIFO(PatternCompiler compiler) {
-    this(GenericPatternCache.DEFAULT_CAPACITY, compiler);
-  }
-
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * PatternCacheFIFO(capacity, new Perl5Compiler());
-   * </pre></blockquote>
-   */
-  public PatternCacheFIFO(int capacity) {
-    this(capacity, new Perl5Compiler());
-  }
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * PatternCacheFIFO(GenericPatternCache.DEFAULT_CAPACITY);
-   * </pre></blockquote>
-   */
-  public PatternCacheFIFO() {
-    this(GenericPatternCache.DEFAULT_CAPACITY);
-  }
-
-}
diff -Nru old\org\apache\oro\text\PatternCacheFIFO2.java new\org\apache\oro\text\PatternCacheFIFO2.java
--- old\org\apache\oro\text\PatternCacheFIFO2.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\PatternCacheFIFO2.java	Thu Jan 01 01:00:00 1970
@@ -1,133 +0,0 @@
-/*
- * $Id: PatternCacheFIFO2.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text;
-
-import java.util.*;
-
-import org.apache.oro.text.regex.*;
-import org.apache.oro.util.*;
-
-/**
- * This class is a GenericPatternCache subclass implementing a second
- * chance FIFO (First In First Out) cache replacement policy.  In other
- * words, patterns are added to the cache until the cache becomes full.
- * Once the cache is full, when a new pattern is added to the cache, it 
- * replaces the first of the current patterns in the cache to have been
- * added, unless that pattern has been used recently (generally
- * between the last cache replacement and now).
- * If the pattern to be replaced has been used, it is given
- * a second chance, and the next pattern in the cache is tested for
- * replacement in the same manner.  If all the patterns are given a
- * second chance, then the original pattern selected for replacement is
- * replaced.
- *
- * @version @version@
- * @since 1.0
- * @see GenericPatternCache
- */
-public final class PatternCacheFIFO2 extends GenericPatternCache {
-
-  /**
-   * Creates a PatternCacheFIFO2 instance with a given cache capacity,
-   * initialized to use a given PatternCompiler instance as a pattern compiler.
-   * <p>
-   * @param capacity  The capacity of the cache.
-   * @param compiler  The PatternCompiler to use to compile patterns.
-   */
-  public PatternCacheFIFO2(int capacity, PatternCompiler compiler) {
-    super(new CacheFIFO2(capacity), compiler);
-  }
-
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * PatternCacheFIFO2(GenericPatternCache.DEFAULT_CAPACITY, compiler);
-   * </pre></blockquote>
-   */
-  public PatternCacheFIFO2(PatternCompiler compiler) {
-    this(GenericPatternCache.DEFAULT_CAPACITY, compiler);
-  }
-
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * PatternCacheFIFO2(capacity, new Perl5Compiler());
-   * </pre></blockquote>
-   */
-  public PatternCacheFIFO2(int capacity) {
-    this(capacity, new Perl5Compiler());
-  }
-
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * PatternCacheFIFO2(GenericPatternCache.DEFAULT_CAPACITY);
-   * </pre></blockquote>
-   */
-  public PatternCacheFIFO2() {
-    this(GenericPatternCache.DEFAULT_CAPACITY);
-  }
-
-}
-
-
-
diff -Nru old\org\apache\oro\text\PatternCacheRandom.java new\org\apache\oro\text\PatternCacheRandom.java
--- old\org\apache\oro\text\PatternCacheRandom.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\PatternCacheRandom.java	Thu Jan 01 01:00:00 1970
@@ -1,124 +0,0 @@
-/*
- * $Id: PatternCacheRandom.java,v 1.7 2003/11/07 20:16:24 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text;
-
-import java.util.*;
-
-import org.apache.oro.text.regex.*;
-import org.apache.oro.util.*;
-
-/**
- * This class is a GenericPatternCache subclass implementing a random
- * cache replacement policy.  In other words,
- * patterns are added to the cache until it becomes full.  Once the
- * cache is full, when a new pattern is added to the cache, it replaces
- * a randomly selected pattern in the cache.
- *
- * @version @version@
- * @since 1.0
- * @see GenericPatternCache
- */
-public final class PatternCacheRandom extends GenericPatternCache {
-
-  /**
-   * Creates a PatternCacheRandom instance with a given cache capacity
-   * and initialized to use a given PatternCompiler instance as a pattern
-   * compiler.
-   * <p>
-   * @param capacity  The capacity of the cache.
-   * @param compiler  The PatternCompiler to use to compile patterns.
-   */
-  public PatternCacheRandom(int capacity, PatternCompiler compiler) {
-    super(new CacheRandom(capacity), compiler);
-  }
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * PatternCacheRandom(GenericPatternCache.DEFAULT_CAPACITY, compiler);
-   * </pre></blockquote>
-   */
-  public PatternCacheRandom(PatternCompiler compiler) {
-    this(GenericPatternCache.DEFAULT_CAPACITY, compiler);
-  }
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * PatternCacheRandom(capacity, new Perl5Compiler());
-   * </pre></blockquote>
-   */
-  public PatternCacheRandom(int capacity) {
-    this(capacity, new Perl5Compiler());
-  }
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * PatternCacheRandom(GenericPatternCache.DEFAULT_CAPACITY);
-   * </pre></blockquote>
-   */
-  public PatternCacheRandom() {
-    this(GenericPatternCache.DEFAULT_CAPACITY);
-  }
-
-}
-
-
-
diff -Nru old\org\apache\oro\text\perl\package.html new\org\apache\oro\text\perl\package.html
--- old\org\apache\oro\text\perl\package.html	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\perl\package.html	Thu Jan 01 01:00:00 1970
@@ -1,6 +0,0 @@
-<!-- $Id: package.html,v 1.1.1.1 2000/07/23 23:08:50 jon Exp $ -->
-<body>
-This package used to be the PerlTools library and adds Perl5
-regular expression syntactic sugar built on top of the
-{@link org.apache.oro.text.regex} Perl5 regular expression classes.
-</body>
diff -Nru old\org\apache\oro\text\regex\MalformedPatternException.java new\org\apache\oro\text\regex\MalformedPatternException.java
--- old\org\apache\oro\text\regex\MalformedPatternException.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\regex\MalformedPatternException.java	Tue Nov 10 18:49:04 2009
@@ -75,6 +75,8 @@
  */
 public class MalformedPatternException extends Exception {
 
+	private static final long serialVersionUID = 3558633154412885211L;
+
   /**
    * Simply calls the corresponding constructor of its superclass.
    */
diff -Nru old\org\apache\oro\text\regex\package.html new\org\apache\oro\text\regex\package.html
--- old\org\apache\oro\text\regex\package.html	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\regex\package.html	Thu Jan 01 01:00:00 1970
@@ -1,136 +0,0 @@
-<!-- $Id: package.html,v 1.2 2001/05/17 19:00:55 dfs Exp $ -->
-<body>
-This package used to be the OROMatcher library and provides both
-generic regular expression interfaces and Perl5 regular expression
-compatible implementation classes.
-
-<p>
-<em>Note: The following information will be moved into the user's guide.</em>
-</p>
-
-<h1> Perl5 regular expressions </h1>
-</a>
-<p>
-Here we summarize the syntax of Perl5.003 regular expressions, all of
-which is supported by the Perl5 classes in this package. However, for
-a definitive reference, you should consult the 
-<a href="http://www.perl.org/CPAN/doc/manual/html/pod/perlre.html">
-<code>perlre</code> man page </a>
-that accompanies the Perl5 distribution and also the book
-<em> Programming Perl, 2nd Edition </em> from O'Reilly & Associates.
-We are working toward implementing the features added after Perl5.003
-up to and including Perl 5.6.  Please remember, we only guarantee
-support for Perl5.003 expressions in version 2.0.
-
-<p>
-<ul>
-<li> Alternatives separated by |
-<li> Quantified atoms
- <dl compact>
-      <dt> {n,m} <dd> Match at least n but not more than m times.
-      <dt> {n,}  <dd> Match at least n times.
-      <dt> {n}   <dd> Match exactly n times.  
-      <dt> *     <dd> Match 0 or more times.
-      <dt> +     <dd> Match 1 or more times.
-      <dt> ?     <dd> Match 0 or 1 times.
- </dl>
- <li> Atoms
- <ul>
-     <li> regular expression within parentheses
-     <li> a . matches everything except \n
-     <li> a ^ is a null token matching the beginning of a string or line
-          (i.e., the position right after a newline or right before
-           the beginning of a string)
-     <li> a $ is a null token matching the end of a string or line
-          (i.e., the position right before a newline or right after
-           the end of a string)
-     <li> Character classes (e.g., [abcd]) and ranges (e.g. [a-z])
-     <ul>
-         <li> Special backslashed characters work within a character
-              class (except for backreferences and boundaries).  
-         <li> \b is backspace inside a character class
-     </ul>
-     <li> Special backslashed characters
-     <dl compact>
-         <dt> \b <dd> null token matching a word boundary (\w on one side
-                      and \W on the other)
-         <dt> \B <dd> null token matching a boundary that isn't a
-                      word boundary
-         <dt> \A <dd> Match only at beginning of string
-         <dt> \Z <dd> Match only at end of string (or before newline
-                      at the end)
-         <dt> \n <dd> newline
-         <dt> \r <dd> carriage return
-         <dt> \t <dd> tab
-         <dt> \f <dd> formfeed
-         <dt> \d <dd> digit [0-9]
-         <dt> \D <dd> non-digit [^0-9]
-         <dt> \w <dd> word character [0-9a-z_A-Z]
-         <dt> \W <dd> a non-word character [^0-9a-z_A-Z]
-         <dt> \s <dd> a whitespace character [ \t\n\r\f]
-         <dt> \S <dd> a non-whitespace character [^ \t\n\r\f]
-         <dt> \xnn <dd> hexadecimal representation of character
-         <dt> \cD <dd> matches the corresponding control character
-         <dt> \nn or \nnn <dd> octal representation of character
-                               unless a backreference.  a 
-         <dt> \1, \2, \3, etc. <dd> match whatever the first, second,
-          third, etc. parenthesized group matched.  This is called a
-          backreference.  If there is no corresponding group, the
-          number is interpreted as an octal representation of a character.
-         <dt> \0 <dd> matches null character
-         <dt> Any other backslashed character matches itself
-     </dl>
- </ul>
- <li> Expressions within parentheses are matched as subpattern groups
-      and saved for use by certain methods.
- </ul>
-
-<p>
-By default, a quantified subpattern is <em> greedy </em>.
-In other words it matches as many times as possible without causing
-the rest of the pattern not to match. To change the quantifiers
-to match the minimum number of times possible, without
-causing the rest of the pattern not to match, you may use
-a "?" right after the quantifier.
-
-<dl compact>
-<dt> *?     <dd> Match 0 or more times
-<dt> +?     <dd> Match 1 or more times
-<dt> ??     <dd> Match 0 or 1 time
-<dt> {n}?   <dd> Match exactly n times
-<dt> {n,}?  <dd> Match at least n times
-<dt> {n,m}? <dd> Match at least n but not more than m times
-</dl>
-
-<p>
-<b> Perl5 extended regular expressions </b> are fully supported.
-
-<dl compact>
-<dt> (?#text) <dd> An embedded comment causing text to be ignored.
-<dt> (?:regexp) <dd> Groups things like "()" but doesn't cause the
- group match to be saved.
-<dt> (?=regexp) <dd>
-                 A zero-width positive lookahead assertion.  For
-                 example, \w+(?=\s) matches a word followed by
-                 whitespace, without including whitespace in the
-                 MatchResult.
-
-<dt> (?!regexp) <dd>
-                 A zero-width negative lookahead assertion.  For
-                 example foo(?!bar) matches any occurrence of
-                 "foo" that isn't followed by "bar".  Remember
-                 that this is a zero-width assertion, which means
-                 that a(?!b)d will match ad because a is followed
-                 by a character that is not b (the d) and a d
-                 follows the zero-width assertion.
-
-
-<dt> (?imsx) <dd> One or more embedded pattern-match modifiers.
-                i enables case insensitivity, m enables multiline
-                treatment of the input, s enables single line treatment
-                of the input, and x enables extended whitespace comments.
-</ul>
-
-
-</body>
-
diff -Nru old\org\apache\oro\text\regex\Perl5Debug.java new\org\apache\oro\text\regex\Perl5Debug.java
--- old\org\apache\oro\text\regex\Perl5Debug.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\regex\Perl5Debug.java	Thu Jan 01 01:00:00 1970
@@ -1,265 +0,0 @@
-/*
- * $Id: Perl5Debug.java,v 1.11 2003/11/07 20:16:25 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.text.regex;
-
-
-/**
- * The Perl5Debug class is not intended for general use and should not
- * be instantiated, but is provided because some users may find the output
- * of its single method to be useful.
- * The Perl5Compiler class generates a representation of a
- * regular expression identical to that of Perl5 in the abstract, but
- * not in terms of actual data structures.  The Perl5Debug class allows
- * the bytecode program contained by a Perl5Pattern to be printed out for
- * comparison with the program generated by Perl5 with the -r option.
- *
- * @version @version@
- * @since 1.0
- * @see Perl5Pattern
- */
-public final class Perl5Debug {
-
-  /**
-   * A dummy constructor to prevent instantiation of Perl5Debug.
-   */
-  private Perl5Debug() { }
-
-
-  /**
-   * This method prints to a String the bytecode program contained in a
-   * Perl5Pattern._  The program byte codes are identical to those
-   * generated by Perl5 with the -r option, but the offsets are
-   * different due to the different data structures used.  This
-   * method is useful for diagnosing suspected bugs.  The Perl5Compiler
-   * class is designed to produce regular expression programs identical
-   * to those produced by Perl5.  By comparing the output of this method
-   * and the output of Perl5 with the -r option on the same regular
-   * expression, you can determine if Perl5Compiler correctly compiled
-   * an expression.
-   * <p>
-   * @param regexp  The Perl5Pattern to print.
-   * @return A string representation of the bytecode program defining the
-   *         regular expression.
-   */
-
-
-  public static String printProgram(Perl5Pattern regexp) {
-    StringBuffer buffer;
-    char operator = OpCode._OPEN, prog[];
-    int offset, next;
-
-    prog = regexp._program;
-    offset = 1;
-    buffer = new StringBuffer();
-
-    while(operator != OpCode._END) {
-      operator = prog[offset];
-      buffer.append(offset);
-      _printOperator(prog, offset, buffer);
-
-      next = OpCode._getNext(prog, offset);
-      offset+=OpCode._operandLength[operator];
-
-      buffer.append("(" + next + ")");
-
-      offset+=2;
-
-      if(operator == OpCode._ANYOF) {
-	offset += 16;
-      } else if(operator == OpCode._ANYOFUN || operator == OpCode._NANYOFUN) {
-	while(prog[offset] != OpCode._END) {
-	  if(prog[offset] == OpCode._RANGE)
-	    offset+=3;
-	  else
-	    offset+=2;
-	}
-	++offset;
-      } else if(operator == OpCode._EXACTLY) {
-	  ++offset;
-	  buffer.append(" <");
-
-	//while(prog[offset] != '0')
-	while(prog[offset] != CharStringPointer._END_OF_STRING) {
-	  //while(prog[offset] != 0 &&
-	  //  prog[offset] != CharStringPointer._END_OF_STRING) {
-	  buffer.append(prog[offset]);
-	  ++offset;
-	}
-	buffer.append(">");
-	++offset;
-      }
-
-      buffer.append('\n');
-    }
-
-    // Can print some other stuff here.
-    if(regexp._startString != null)
-      buffer.append("start `" + new String(regexp._startString) + "' ");
-    if(regexp._startClassOffset != OpCode._NULL_OFFSET) {
-      buffer.append("stclass `");
-      _printOperator(prog, regexp._startClassOffset, buffer);
-      buffer.append("' ");
-    }
-    if((regexp._anchor & Perl5Pattern._OPT_ANCH) != 0)
-      buffer.append("anchored ");
-    if((regexp._anchor & Perl5Pattern._OPT_SKIP) != 0)
-      buffer.append("plus ");
-    if((regexp._anchor & Perl5Pattern._OPT_IMPLICIT) != 0)
-      buffer.append("implicit ");
-    if(regexp._mustString != null)
-      buffer.append("must have \""+ new String(regexp._mustString) +
-		       "\" back " + regexp._back + " ");
-    buffer.append("minlen " + regexp._minLength + '\n');
-
-    return buffer.toString();
-  }
-
-
-  static void _printOperator(char[] program, int offset, StringBuffer buffer) {
-    String str = null;
-
-    buffer.append(":");
-
-    switch(program[offset]) {
-    case OpCode._BOL      : str = "BOL"; break;
-    case OpCode._MBOL     : str = "MBOL"; break;
-    case OpCode._SBOL     : str = "SBOL"; break;
-    case OpCode._EOL      : str = "EOL"; break;
-    case OpCode._MEOL     : str = "MEOL"; break;
-    case OpCode._ANY      : str = "ANY"; break;
-    case OpCode._SANY     : str = "SANY"; break;
-    case OpCode._ANYOF    : str = "ANYOF"; break;
-    case OpCode._ANYOFUN  : str = "ANYOFUN"; break;
-    case OpCode._NANYOFUN : str = "NANYOFUN"; break;
-      /*
-    case OpCode._ANYOF : // debug
-      buffer.append("ANYOF\n\n");
-      int foo = OpCode._OPERAND(offset);
-      char ch;
-      for(ch=0; ch < 256; ch++) {
-	if(ch % 16 == 0)
-	  buffer.append(" ");
-	buffer.append((program[foo + (ch >> 4)] &
-		       (1 << (ch & 0xf))) == 0 ? 0 : 1);
-      }
-      buffer.append("\n\n");
-      break;
-      */
-    case OpCode._BRANCH  : str = "BRANCH"; break;
-    case OpCode._EXACTLY : str = "EXACTLY"; break;
-    case OpCode._NOTHING : str = "NOTHING"; break;
-    case OpCode._BACK    : str = "BACK"; break;
-    case OpCode._END     : str = "END"; break;
-    case OpCode._ALNUM   : str = "ALNUM"; break;
-    case OpCode._NALNUM  : str = "NALNUM"; break;
-    case OpCode._BOUND   : str = "BOUND"; break;
-    case OpCode._NBOUND  : str = "NBOUND"; break;
-    case OpCode._SPACE   : str = "SPACE"; break;
-    case OpCode._NSPACE  : str = "NSPACE"; break;
-    case OpCode._DIGIT   : str = "DIGIT"; break;
-    case OpCode._NDIGIT  : str = "NDIGIT"; break;
-    case OpCode._ALPHA   : str = "ALPHA"; break;
-    case OpCode._BLANK   : str = "BLANK"; break;
-    case OpCode._CNTRL   : str = "CNTRL"; break;
-    case OpCode._GRAPH   : str = "GRAPH"; break;
-    case OpCode._LOWER   : str = "LOWER"; break;
-    case OpCode._PRINT   : str = "PRINT"; break;
-    case OpCode._PUNCT   : str = "PUNCT"; break;
-    case OpCode._UPPER   : str = "UPPER"; break;
-    case OpCode._XDIGIT  : str = "XDIGIT"; break;
-    case OpCode._ALNUMC  : str = "ALNUMC"; break;
-    case OpCode._ASCII   : str = "ASCII"; break;
-    case OpCode._CURLY :
-      buffer.append("CURLY {");
-      buffer.append((int)OpCode._getArg1(program, offset));
-      buffer.append(','); buffer.append((int)OpCode._getArg2(program, offset));
-      buffer.append('}');
-      break;
-    case OpCode._CURLYX:
-      buffer.append("CURLYX {");
-      buffer.append((int)OpCode._getArg1(program, offset));
-      buffer.append(','); buffer.append((int)OpCode._getArg2(program, offset));
-      buffer.append('}');
-      break;
-    case OpCode._REF:
-      buffer.append("REF"); buffer.append((int)OpCode._getArg1(program, offset));
-      break;
-    case OpCode._OPEN:
-      buffer.append("OPEN"); buffer.append((int)OpCode._getArg1(program, offset));
-      break;
-    case OpCode._CLOSE:
-      buffer.append("CLOSE"); buffer.append((int)OpCode._getArg1(program, offset));
-      break;
-    case OpCode._STAR   : str = "STAR"; break;
-    case OpCode._PLUS   : str = "PLUS"; break;
-    case OpCode._MINMOD : str = "MINMOD"; break;
-    case OpCode._GBOL   : str = "GBOL"; break;
-    case OpCode._UNLESSM: str = "UNLESSM"; break;
-    case OpCode._IFMATCH: str = "IFMATCH"; break;
-    case OpCode._SUCCEED: str = "SUCCEED"; break;
-    case OpCode._WHILEM : str = "WHILEM"; break;
-    default:
-      buffer.append("Operator is unrecognized.  Faulty expression code!");
-      break;
-    }
-    
-    if(str != null)
-      buffer.append(str);
-  }
-}
diff -Nru old\org\apache\oro\text\regex\Perl5Pattern.java new\org\apache\oro\text\regex\Perl5Pattern.java
--- old\org\apache\oro\text\regex\Perl5Pattern.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\text\regex\Perl5Pattern.java	Tue Nov 10 18:49:04 2009
@@ -79,6 +79,9 @@
  * @see Perl5Matcher
  */
 public final class Perl5Pattern implements Pattern, Serializable, Cloneable {
+
+	private static final long serialVersionUID = 2416464270803402709L;
+	
   static final int
     _OPT_ANCH_BOL  = 0x01,
     _OPT_ANCH_MBOL = 0x02,
diff -Nru old\org\apache\oro\util\CacheFIFO.java new\org\apache\oro\util\CacheFIFO.java
--- old\org\apache\oro\util\CacheFIFO.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\util\CacheFIFO.java	Thu Jan 01 01:00:00 1970
@@ -1,145 +0,0 @@
-/*
- * $Id: CacheFIFO.java,v 1.7 2003/11/07 20:16:25 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.util;
-
-import java.util.*;
-
-/**
- * This class is a GenericCache subclass implementing a FIFO (First
- * In First Out) cache replacement policy.  In other words, values are
- * added to the cache until the cache becomes full.  Once the cache is full,
- * if a new pattern is added to the cache, it replaces the first of
- * the current patterns in the cache to have been added.
- *
- * @version @version@
- * @since 1.0
- * @see GenericCache
- */
-
-public final class CacheFIFO extends GenericCache {
-  private int __curent = 0;
-
-  /**
-   * Creates a CacheFIFO instance with a given cache capacity.
-   * <p>
-   * @param capacity  The capacity of the cache.
-   */
-  public CacheFIFO(int capacity) { 
-    super(capacity);
-  }
-
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * CacheFIFO(GenericCache.DEFAULT_CAPACITY);
-   * </pre></blockquote>
-   */
-  public CacheFIFO(){
-    this(GenericCache.DEFAULT_CAPACITY);
-  }
-
-
-  /**
-   * Adds a value to the cache.  If the cache is full, when a new value
-   * is added to the cache, it replaces the first of the current values
-   * in the cache to have been added (i.e., FIFO).
-   * <p>
-   * @param key   The key referencing the value added to the cache.
-   * @param value The value to add to the cache.
-   */
-  public final synchronized void addElement(Object key, Object value) {
-    int index;
-    Object obj;
-
-    obj = _table.get(key);
-
-    if(obj != null) {
-      GenericCacheEntry entry;
-
-      // Just replace the value.  Technically this upsets the FIFO ordering,
-      // but it's expedient.
-      entry = (GenericCacheEntry)obj;
-      entry._value = value;
-      entry._key   = key;
-
-      return;
-    }
-
-    // If we haven't filled the cache yet, put it at the end.
-    if(!isFull()) {
-      index = _numEntries;
-      ++_numEntries;
-    } else {
-      // Otherwise, replace the current pointer, which takes care of
-      // FIFO in a circular fashion.
-      index = __curent;
-
-      if(++__curent >= _cache.length)
-	__curent = 0;
-
-      _table.remove(_cache[index]._key);
-    }
-
-    _cache[index]._value = value;
-    _cache[index]._key   = key;
-    _table.put(key, _cache[index]);
-  }
-
-}
diff -Nru old\org\apache\oro\util\CacheFIFO2.java new\org\apache\oro\util\CacheFIFO2.java
--- old\org\apache\oro\util\CacheFIFO2.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\util\CacheFIFO2.java	Thu Jan 01 01:00:00 1970
@@ -1,182 +0,0 @@
-/*
- * $Id: CacheFIFO2.java,v 1.7 2003/11/07 20:16:25 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.util;
-
-import java.util.*;
-
-/**
- * This class is a GenericCache subclass implementing a second
- * chance FIFO (First In First Out) cache replacement policy.  In other
- * words, values are added to the cache until the cache becomes full.
- * Once the cache is full, when a new value is added to the cache, it 
- * replaces the first of the current values in the cache to have been
- * added, unless that value has been used recently (generally
- * between the last cache replacement and now).
- * If the value to be replaced has been used, it is given
- * a second chance, and the next value in the cache is tested for
- * replacement in the same manner.  If all the values are given a
- * second chance, then the original pattern selected for replacement is
- * replaced.
- *
- * @version @version@
- * @since 1.0
- * @see GenericCache
- */
-public final class CacheFIFO2 extends GenericCache {
-  private int __current = 0;
-  private boolean[] __tryAgain;
-
-  /**
-   * Creates a CacheFIFO2 instance with a given cache capacity.
-   * <p>
-   * @param capacity  The capacity of the cache.
-   */
-  public CacheFIFO2(int capacity) { 
-    super(capacity);
-
-    __tryAgain = new boolean[_cache.length];
-  }
-
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * CacheFIFO2(GenericCache.DEFAULT_CAPACITY);
-   * </pre></blockquote>
-   */
-  public CacheFIFO2(){
-    this(GenericCache.DEFAULT_CAPACITY);
-  }
-
-
-  public synchronized Object getElement(Object key) { 
-    Object obj;
-
-    obj = _table.get(key);
-
-    if(obj != null) {
-      GenericCacheEntry entry;
-
-      entry = (GenericCacheEntry)obj;
-
-      __tryAgain[entry._index] = true;
-      return entry._value;
-    }
-
-    return null;
-  }
-
-
-  /**
-   * Adds a value to the cache.  If the cache is full, when a new value
-   * is added to the cache, it replaces the first of the current values
-   * in the cache to have been added (i.e., FIFO2).
-   * <p>
-   * @param key   The key referencing the value added to the cache.
-   * @param value The value to add to the cache.
-   */
-  public final synchronized void addElement(Object key, Object value) {
-    int index;
-    Object obj;
-
-    obj = _table.get(key);
-
-    if(obj != null) {
-      GenericCacheEntry entry;
-
-      // Just replace the value.  Technically this upsets the FIFO2 ordering,
-      // but it's expedient.
-      entry = (GenericCacheEntry)obj;
-      entry._value = value;
-      entry._key   = key;
-
-      // Set the try again value to compensate.
-      __tryAgain[entry._index] = true;
-
-      return;
-    }
-
-    // If we haven't filled the cache yet, put it at the end.
-    if(!isFull()) {
-      index = _numEntries;
-      ++_numEntries;
-    } else {
-      // Otherwise, find the next slot that doesn't have a second chance.
-      index = __current;
-      
-      while(__tryAgain[index]) {
-	__tryAgain[index] = false;
-	if(++index >= __tryAgain.length)
-	  index = 0;
-      }
-
-      __current = index + 1;
-      if(__current >= _cache.length)
-	__current = 0;
-
-      _table.remove(_cache[index]._key);
-    }
-
-    _cache[index]._value = value;
-    _cache[index]._key   = key;
-    _table.put(key, _cache[index]);
-  }
-
-}
-
diff -Nru old\org\apache\oro\util\CacheRandom.java new\org\apache\oro\util\CacheRandom.java
--- old\org\apache\oro\util\CacheRandom.java	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\util\CacheRandom.java	Thu Jan 01 01:00:00 1970
@@ -1,139 +0,0 @@
-/*
- * $Id: CacheRandom.java,v 1.7 2003/11/07 20:16:25 dfs Exp $
- *
- * ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-
-package org.apache.oro.util;
-
-import java.util.*;
-
-/**
- * This class is a GenericCache subclass implementing a random
- * cache replacement policy.  In other words,
- * values are added to the cache until it becomes full.  Once the
- * cache is full, when a new value is added to the cache, it replaces
- * a randomly selected value in the cache.
- *
- * @version @version@
- * @since 1.0
- * @see GenericCache
- */
-public final class CacheRandom extends GenericCache {
-  private Random __random;
-
-  /**
-   * Creates a CacheRandom instance with a given cache capacity.
-   * <p>
-   * @param capacity  The capacity of the cache.
-   */
-  public CacheRandom(int capacity) { 
-    super(capacity);
-    __random = new Random(System.currentTimeMillis());
-  }
-
-  /**
-   * Same as:
-   * <blockquote><pre>
-   * CacheRandom(GenericCache.DEFAULT_CAPACITY);
-   * </pre></blockquote>
-   */
-  public CacheRandom(){
-    this(GenericCache.DEFAULT_CAPACITY);
-  }
-
-  /**
-   * Adds a value to the cache.  If the cache is full, when a new value
-   * is added to the cache, it replaces the first of the current values
-   * in the cache to have been added (i.e., Random).
-   * <p>
-   * @param key   The key referencing the value added to the cache.
-   * @param value The value to add to the cache.
-   */
-  public final synchronized void addElement(Object key, Object value) {
-
-    int index;
-    Object obj;
-
-    obj = _table.get(key);
-
-    if(obj != null) {
-      GenericCacheEntry entry;
-
-      // Just replace the value.
-      entry = (GenericCacheEntry)obj;
-      entry._value = value;
-      entry._key   = key;
-
-      return;
-    }
-
-    // Expression is not in cache.
-
-    // If we haven't filled the cache yet, put it at the end.
-    if(!isFull()) {
-      index = _numEntries;
-      ++_numEntries;
-    } else {
-      // Otherwise, replace a random entry.
-      index = (int)(_cache.length*__random.nextFloat());
-      _table.remove(_cache[index]._key);
-    }
-
-    _cache[index]._value = value;
-    _cache[index]._key   = key;
-    _table.put(key, _cache[index]);
-  }
-}
diff -Nru old\org\apache\oro\util\package.html new\org\apache\oro\util\package.html
--- old\org\apache\oro\util\package.html	Sun Dec 28 23:00:30 2003
+++ new\org\apache\oro\util\package.html	Thu Jan 01 01:00:00 1970
@@ -1,6 +0,0 @@
-<!-- $Id: package.html,v 1.1.1.1 2000/07/23 23:08:54 jon Exp $ -->
-<body>
-This package includes general classes required by {@link
-org.apache.oro.text} and related packages, but that can also be applied to
-more general uses.
-</body>
